NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison$graph
Comparison$Test
data(net)
history <- Mostconnected(Network = net)
ExtinctionPlot(History = history)
ExtinctionPlot(History = history, Variable = "LinksPerSpecies")
data("chilean_intertidal")
degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
install.packages(c("classInt", "covr", "keras", "later", "pkgbuild", "promises", "rlang", "shiny", "units"))
install.packages(c("classInt", "covr", "keras", "later", "pkgbuild", "promises", "rlang", "shiny", "units"))
pkgdown::build_site()
pkgdown::build_site(new_process = FALSE)
pkgdown::build_site(new_process = FALSE)
pkgdown::deploy_site_github()
use_github_links()
??use_github_links
usethis::use_github_links()
require(devtools)
use_readme_rmd()
use_news_md()
use_readme_rmd()
use_news_md()
use_vignette("NetworkExtinction")
use_github_links()
?use_github_links()
?use_travis
library(NetworkExtinction)
library(NetworkExtinction)
data("net")
Mostconnected(Network = net)
library(NetworkExtinction)
data("net")
Mostconnected(Network = net)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site(devel = T)
?pkgdown::build_site
library(NetworkExtinction)
library(NetworkExtinction)
More_Connected <- readRDS("/home/derek/Desktop/moreconnected.rds")
More_Connected
devtools::use_data(More_Connected)
usethis::use_data(More_Connected)
Less_Connected <- readRDS("/home/derek/Desktop/leastconnected.rds")
Less_Connected
Less_Connected
usethis::use_data(Less_Connected)
More_Connected
More_Connected
class(Less_Connected)
class(More_Connected)
library(NetworkExtinction)
data("More_Connected")
data("Less_Connected")
H1 <- Mostconnected(More_Connected)
H2 <- Mostconnected(Less_Connected)
NetworkExtinction::degree_distribution(More_Connected)
NetworkExtinction::degree_distribution(More_Connected, name = "More")
NetworkExtinction::degree_distribution(Less_Connected, name = "Less")
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
library(NetworkExtinction)
?RandomExtinctions
data(net)
RandomExtinctions()
RandomExtinctions(Network = net)
data("More_Connected")
RandomExtinctions(Network = More_Connected)
RandomExtinctions(Network = More_Connected)
RandomExtinctions(Network = More_Connected)
RandomExtinctions(Network = More_Connected)
RandomExtinctions(Network = More_Connected, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 5)
RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 30)
RandomExtinctions(Network = net, nsim = 30)
RandomExtinctions(Network = net, nsim = 40)
RandomExtinctions(Network = net, nsim = 50)
class(net)
class(More_Connected)
class(More_Connected)
RandomExtinctions(Network = More_Connected, nsim = 50)
RandomExtinctions
Network <- More_Connected
nsim = 20
NumExt <- sd <- AccSecondaryExtinction <- NULL
network <- Network
sims <- list()
i = 1
sims[[i]] <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF)
network.size()
network::network.size(More_Connected)
library(network)
sims[[i]] <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF)
sims[[i]]$simulation <- i
message(paste("Simulation", i, "of", nsim, "ready"))
i = 2
sims[[i]] <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF)
sims[[i]]$simulation <- i
message(paste("Simulation", i, "of", nsim, "ready"))
sims
network <- Network
sims <- list()
for(i in 1:nsim){
sims[[i]] <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF)
sims[[i]]$simulation <- i
message(paste("Simulation", i, "of", nsim, "ready"))
}
sims
class(sims)
cond <- sapply(sims, function(x) class(x) != "try-error")
cond
cond <- sapply(sims, function(x) class(x))
cond
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 50)
RandomExtinctions(Network = More_Connected, nsim = 50)
RandomExtinctions(Network = More_Connected, nsim = 50)
?try
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 50)
RandomExtinctions(Network = More_Connected, nsim = 50)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
RandomExtinctions(Network = More_Connected, nsim = 50)
RandomExtinctions(Network = More_Connected, nsim = 20)
RandomExtinctions(Network = Less_Connected, nsim = 20)
RandomExtinctions(Network = Less_Connected, nsim = 50)
RandomExtinctions(Network = More_Connected, nsim = 50)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
pkgdown::build_site()
pkgdown::build_site()
library(NetworkExtinction)
library(NetworkExtinction)
?nls
library(NetworkExtinction)
degree_distribution(Network = More_Connected, scale = "loglog")
degree_distribution(Network = More_Connected)
degree_distribution(Network = More_Connected, scale = "loglog", name = "Connected")
?degree_distribution
degree_distribution(Network = More_Connected, scale = "loglog", name = "Connected")
degree_distribution(Network = More_Connected, scale = "arithmetic", name = "Connected")
degree_distribution(Network = More_Connected, scale = "LogLog", name = "Connected")
degree_distribution(Network = More_Connected, scale = "arithmetic", name = "Connected")
degree_distribution(Network = Less_Connected, scale = "LogLog", name = "Connected")
degree_distribution(Network = Less_Connected, scale = "arithmetic", name = "Connected")
degree_distribution(Network = Less_Connected, scale = "LogLog", name = "Connected")
degree_distribution(Network = chilean_intertidal, scale = "LogLog", name = "Connected")
degree_distribution(Network = chilean_intertidal, scale = "arithmetic", name = "Connected")
usethis::use_travis()
usethis::use_cran_badge()
library(NetworkExtinction)
pkgdown::build_site()
?usethis::use_cran_badge()
usethis::use_lifecycle_badge("Stable")
usethis::use_lifecycle_badge("Maturing")
pkgdown::build_site()
badger::badge_cran_download("NetworkExtinction", "last-month", "green")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::build_site()
library(NetworkExtinction)
?degree_distribution
library(NetworkExtinction)
data("net")
degree_distribution(net, name = "Test")
?ks.test()
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
?degree_distribution
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$graph
fit1$params
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$graph
fit1$params
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$params
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$params
fit1$models
fit1$params
?selfStart
fit1$params$term[1]
fit1$params$estimate[fit1$params$term == "(intercept)",]
fit1$params$term
fit1$params$term == "(intercept)"
fit1$params$term == "(Intercept)"
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$params
library(NetworkExtinction)
data("chilean_intertidal")
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$DDvalues
fit1$models
fit1$params
rnorm(20)
ks.test(rnorm(20), y = "pnorm", alternative = "two.sided")
broom::tidy(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
broom::glance(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
MuMIn::AICc(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
AIC(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
shapiro.test(rnorm(20))
AIC(shapiro.test(rnorm(20)))
AIC(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
install.packages("AICcmodavg")
AICcmodavg::AICc(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
?AICcmodavg::AICcCustom()
?MASS::fitdistr()
MASS::fitdistr(rnorm, "normal")
MASS::fitdistr(rnorm(20), "normal")
logLik(MASS::fitdistr(rnorm(20), "normal"))
class(logLik(MASS::fitdistr(rnorm(20), "normal")))
logLik(MASS::fitdistr(rnorm(20), "normal"))
logLik(MASS::fitdistr(rnorm(20), "normal"))*2
as.numeric(logLik(MASS::fitdistr(rnorm(20), "normal")))
?logLik
x <- 1:5
lmx <- lm(x ~ 1)
logLik(lmx) # using print.logLik() method
utils::str(logLik(lmx))
(fm1 <- lm(rating ~ ., data = attitude))
logLik(fm1)
logLik(fm1, REML = TRUE)
(fm1 <- lm(rating ~ ., data = attitude))
logLik(fm1)
as.numeric(logLik(fm1, REML = TRUE))
(fm1 <- lm(rating ~ ., data = attitude))
logLik(fm1)
as.character(logLik(fm1, REML = TRUE))
(fm1 <- lm(rating ~ ., data = attitude))
logLik(fm1)
broom::tidy(logLik(fm1, REML = TRUE))
(fm1 <- lm(rating ~ ., data = attitude))
logLik(fm1)
broom::glance(logLik(fm1, REML = TRUE))
as.numeric(logLik(MASS::fitdistr(rnorm(20), "normal")))
as.numeric(logLik(MASS::fitdistr(rnorm(20), "normal")))
logLik(ks.test(rnorm(20), y = "pnorm", alternative = "two.sided"))
logLik(MASS::fitdistr(rnorm(20), "normal"))
set.seed(2019)
logLik(MASS::fitdistr(rnorm(20), "normal"))
set.seed(2019)
logLik(MASS::fitdistr(rnorm(20), "normal"))
set.seed(2019)
Dist1 <- MASS::fitdistr(rnorm(20), "normal")
logLik(Dist1)
set.seed(2019)
Dist1 <- MASS::fitdistr(rnorm(20), "normal")
LL <- logLik(Dist1)
LL
LL[[1]]
LL[1]
LL[2]
LL[1]
LL[1]
AICcmodavg::AICcCustom(LogL = LL[1])
AICVal <- 4 - 2*LL[1]
AICVal
set.seed(2019)
Dist1 <- MASS::fitdistr(rnorm(20), "normal")
LL <- logLik(Dist1)
n = 20
AICcVal <- (4 - 2*LL[1]) - (12/n - 1)
AICcVal
AICcVal <- (4 - 2*LL[1]) - (12/(n - 1))
AICcVal
AICcVal <- (4 - 2*LL[1]) + (12/(n - 1))
AICcVal
12/19
12/2
12/1
library(NetworkExtinction)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
data("chilean_intertidal")
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
library(NetworkExtinction)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$params
fit1$params
fit1$graph
library(NetworkExtinction)
library(sna)
library(sna)
Network <- chilean_intertidal
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
name <- "caca"
AIC <- Cumulative <- Exp <- fit <- model <- LogTruncated <- Truncated  <- LogPower <- logLik <- BIC <- Power <- Normal.Resid <- LogExp <-NULL
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph <- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
library(broom)
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph <- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
library(NetworkExtinction)
library(sna)
library(tidyverse)
Network <- chilean_intertidal
name <- "caca"
library(broom)
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph <- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
Summs.exp
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
For.Graph <- full_join(For.Graph, power)
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"
truncated.powerlaw.model <- nls(Cumulative~(K^-y)*(exp(-K/y)), start = list(y=1), data = power)
power$Truncated <- predict(truncated.powerlaw.model)
Summs.truncated <- glance(truncated.powerlaw.model)
Summs.truncated$model <- "Truncated"
Summs.truncated$Normal.Resid <- ifelse(tidy(ks.test(augment(truncated.powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.truncated$AICcNorm <- logLik(MASS::fitdistr(augment(truncated.powerlaw.model)$.resid, "normal"))[1]
Summs.truncated$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(truncated.powerlaw.model)) - 1))
Params.truncated <- tidy(truncated.powerlaw.model)
Params.truncated$model <- "Truncated"
logtruncated.powerlaw.model <- glm(LogCum ~ I(log(K)) + K, data = power)
power$LogTruncated <- exp(predict(logtruncated.powerlaw.model))
For.Graph <- full_join(For.Graph, power)
Summs.logtruncated <- glance(logtruncated.powerlaw.model)
Summs.logtruncated$model <- "LogTruncated"
Summs.logtruncated$Normal.Resid <- ifelse(tidy(ks.test(augment(logtruncated.powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logtruncated$AICcNorm <- logLik(MASS::fitdistr(augment(logtruncated.powerlaw.model)$.resid, "normal"))[1]
Summs.logtruncated$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(logtruncated.powerlaw.model)) - 1))
Params.logtruncated <- tidy(logtruncated.powerlaw.model)
Params.logtruncated$model <- "LogTruncated"
Summs.exp
Summs.power
#all together
Summs <- full_join(Summs.exp, Summs.power)
Summs
Summs <- full_join(Summs, Summs.truncated)
Summs
truncated.powerlaw.model <- nls(Cumulative~(K^-y)*(exp(-K/y)), start = list(y=1), data = power)
power$Truncated <- predict(truncated.powerlaw.model)
Summs.truncated <- glance(truncated.powerlaw.model)
Summs.truncated$model <- "Truncated"
Summs.truncated$Normal.Resid <- ifelse(tidy(ks.test(augment(truncated.powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.truncated$AICcNorm <- logLik(MASS::fitdistr(augment(truncated.powerlaw.model)$.resid, "normal"))[1]
Summs.truncated$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(truncated.powerlaw.model)) - 1))
Params.truncated <- tidy(truncated.powerlaw.model)
Params.truncated$model <- "Truncated"
#all together
Summs <- full_join(Summs.exp, Summs.power)
Summs <- full_join(Summs, Summs.truncated)
Summs <- full_join(Summs, Summs.logexp)
Summs
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1$models
fit1$models %>% group_split(family)
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm)))
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(deltaAICc < 2))
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2))
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows)
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows) %>% dplyr::select(logLik, AIC, BIC, model, Normal.Resid, family)
a <- fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows)
a <- fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows) %>% dplyr::select(logLik, AIC, BIC, model, Normal.Resid, family)
a
a$model
fit1$models
fit1$params
fit1$params %>% filter(model %in% a$model)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$params
fit1$DDvalues
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$graph
fit1$graph + ylim(c(0,1.2))
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$graph + ylim(c(0,1.2))
library(ggplot2)
fit1$graph + ylim(c(0,1.2))
