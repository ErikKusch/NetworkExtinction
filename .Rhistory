fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$params
fit1$params
fit1$graph
library(NetworkExtinction)
library(sna)
library(sna)
Network <- chilean_intertidal
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
name <- "caca"
AIC <- Cumulative <- Exp <- fit <- model <- LogTruncated <- Truncated  <- LogPower <- logLik <- BIC <- Power <- Normal.Resid <- LogExp <-NULL
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph <- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
library(broom)
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph <- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
library(NetworkExtinction)
library(sna)
library(tidyverse)
Network <- chilean_intertidal
name <- "caca"
library(broom)
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph <- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
Summs.exp
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
For.Graph <- full_join(For.Graph, power)
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"
truncated.powerlaw.model <- nls(Cumulative~(K^-y)*(exp(-K/y)), start = list(y=1), data = power)
power$Truncated <- predict(truncated.powerlaw.model)
Summs.truncated <- glance(truncated.powerlaw.model)
Summs.truncated$model <- "Truncated"
Summs.truncated$Normal.Resid <- ifelse(tidy(ks.test(augment(truncated.powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.truncated$AICcNorm <- logLik(MASS::fitdistr(augment(truncated.powerlaw.model)$.resid, "normal"))[1]
Summs.truncated$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(truncated.powerlaw.model)) - 1))
Params.truncated <- tidy(truncated.powerlaw.model)
Params.truncated$model <- "Truncated"
logtruncated.powerlaw.model <- glm(LogCum ~ I(log(K)) + K, data = power)
power$LogTruncated <- exp(predict(logtruncated.powerlaw.model))
For.Graph <- full_join(For.Graph, power)
Summs.logtruncated <- glance(logtruncated.powerlaw.model)
Summs.logtruncated$model <- "LogTruncated"
Summs.logtruncated$Normal.Resid <- ifelse(tidy(ks.test(augment(logtruncated.powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logtruncated$AICcNorm <- logLik(MASS::fitdistr(augment(logtruncated.powerlaw.model)$.resid, "normal"))[1]
Summs.logtruncated$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(logtruncated.powerlaw.model)) - 1))
Params.logtruncated <- tidy(logtruncated.powerlaw.model)
Params.logtruncated$model <- "LogTruncated"
Summs.exp
Summs.power
#all together
Summs <- full_join(Summs.exp, Summs.power)
Summs
Summs <- full_join(Summs, Summs.truncated)
Summs
truncated.powerlaw.model <- nls(Cumulative~(K^-y)*(exp(-K/y)), start = list(y=1), data = power)
power$Truncated <- predict(truncated.powerlaw.model)
Summs.truncated <- glance(truncated.powerlaw.model)
Summs.truncated$model <- "Truncated"
Summs.truncated$Normal.Resid <- ifelse(tidy(ks.test(augment(truncated.powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.truncated$AICcNorm <- logLik(MASS::fitdistr(augment(truncated.powerlaw.model)$.resid, "normal"))[1]
Summs.truncated$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(truncated.powerlaw.model)) - 1))
Params.truncated <- tidy(truncated.powerlaw.model)
Params.truncated$model <- "Truncated"
#all together
Summs <- full_join(Summs.exp, Summs.power)
Summs <- full_join(Summs, Summs.truncated)
Summs <- full_join(Summs, Summs.logexp)
Summs
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1$models
fit1$models %>% group_split(family)
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm)))
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(deltaAICc < 2))
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2))
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows)
fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows) %>% dplyr::select(logLik, AIC, BIC, model, Normal.Resid, family)
a <- fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows)
a <- fit1$models %>% group_split(family) %>% purrr::map(~mutate(.x, deltaAICc = AICcNorm - min(AICcNorm))) %>% purrr::map(~dplyr::filter(.x, deltaAICc < 2)) %>% reduce(bind_rows) %>% dplyr::select(logLik, AIC, BIC, model, Normal.Resid, family)
a
a$model
fit1$models
fit1$params
fit1$params %>% filter(model %in% a$model)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$params
fit1$DDvalues
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$graph
fit1$graph + ylim(c(0,1.2))
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$graph + ylim(c(0,1.2))
library(ggplot2)
fit1$graph + ylim(c(0,1.2))
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$graph
fit1$DDvalues
fit1$models
fit1$params
fit1$params
fit1$graph
fit1$DDvalues
fit1$DDvalues %>% filter(K != 0 & Cumulative != 0)
library(tidyverse)
fit1$DDvalues %>% filter(K != 0 & Cumulative != 0)
fit1$DDvalues %>% filter(K != 0 & Cumulative != 0) %>% gather(key = model, value = fit, Exp, Power, LogExp, LogPower)
colnames(fit1$DDvalues)
library(sna)
library(tidyverse)
library(sna)
Network <- chilean_intertidal
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA, Scenario = name)
name = "caca"
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA, Scenario = name)
For.Graph
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph
head(For.Graph)
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
library(broom)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$family <- "Exponential"
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
For.Graph <- full_join(For.Graph, power)
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
head(For.Graph)
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.logpower$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"
head(For.Graph)
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"
For.Graph
head(For.Graph)
For.Graph <- full_join(For.Graph, LogPower)
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
For.Graph <- full_join(For.Graph, power)
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
For.Graph <- full_join(power)
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$graph
library(tidyverse)
library(sna)
Network <- chilean_intertidal
name = "caca"
AIC <- Cumulative <- Exp <- fit <- model <- LogPower <- logLik <- BIC <- Power <- Normal.Resid <- LogExp <- family <- AICcNorm <- NULL
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$family <- "Exponential"
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
For.Graph <- full_join(For.Graph, power)
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.logpower$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"
head(For.Graph)
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"
For.Graph <- full_join(For.Graph, power)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1
fit2 <- degree_distribution(More_Connected, name = "Test")
fit2
fit3 <- degree_distribution(Less_Connected, name = "Test")
fit3
fit1
predict(logexp.model)
predict(logexp.model, se.fit = T)
predict(logexp.model, se.fit = T)$se.fit
predict(exp.mode, se.fit)
predict(exp.model, se.fit)
predict(exp.model, se.fit = T)
predict(exp.model)
pkgdown::build_site()
library(NetworkExtinction)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1
fit1 <- degree_distribution(chilean_intertidal, name = "Test", scale = "loglog")
fit1
?degree_distribution
degree_distribution
fit1 <- degree_distribution(chilean_intertidal, name = "Test", scale = "LogLog")
fit1
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test", scale = "LogLog")
fit1 <- degree_distribution(chilean_intertidal, scale = "LogLog")
fit1$graph
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
library(NetworkExtinction)
install.packages("dlstats")
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
?Mostconnected
data("net")
Mostconnected(Network = net)
data("chilean_intertidal")
Mostconnected(Network = chilean_intertidal)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
colnames(a)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(A)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
colnames(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
colnames(a)
(1*4000) + (2*4000)
(1*4000) + (2*4000) + (0.5*6600)
(1*4000) + (2*4000) + (0.5*6600) + 11000
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (1000*5.8)
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (10000*0.58)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (10000*0.58)
?ExtinctionOrder
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
colnames(a)
colnames(a$DF)
library(NetworkExtinction)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
colnames(a$DF)
a$Graph
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
a$Graph
library(NetworkExtinction)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
library(NetworkExtinction)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
a$Graph
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (10000*0.58)
11000 + 3300 + 2000 + 0.58*6500 + 12000 + 1800
10000*0.58
6500*0.58
library(NetworkExtinction)
?CompareExtinctions
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
NullHyp$sims
NullHyp$graph
?confint()
NullHyp$sims
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
NullHyp
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
?RandomExtinctions
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 500, parallel = TRUE, ncores = 3)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 500, parallel = TRUE, ncores = 3, Record = T)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
NullHyp$FullSims
NullHyp$FullSims %>% View()
View(NullHyp$FullSims)
library(NetworkExtinction)
View(NullHyp$FullSims)
