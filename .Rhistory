# Fourth, plot it:
# in 1D
TSPlot(ModelOut, deltat = model.deltat, dim = 1)
# in 2D
TSPlot(ModelOut, deltat = model.deltat, dim = 2)
library("devtools", lib.loc="~/R/win-library/3.4")
detach("package:devtools", unload=TRUE)
library(NetworkExtintion)
###############################################
#Intertidal
###############################################
chilean_TI_consumercolum_resourcesrow_withhumans_R <- read_excel("C:/Users/Isidora/Google Drive/Doctorado/Tesis/datos/INTERMAREAL/chilean_TI_consumercolum_resourcesrow_withhumans_R.xlsx")
?devtools::use_vignette()
devtools::use_vignette("How to use the NetworkExtinction package")
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
degree_distribution(net, name = "Test")
net
degree_distribution(net, name = "Test")
a <- degree_distribution(net, name = "Test")
a$DF
DF <- a$DF
library(dplyr)
library(tidyr)
DF2 <- DF %>% filter(K != 0 & Cumulative != 0) %>% gather(key = model, value = fit, Exp, power, truncated)
View(DF2)
a
library(NetworkExtintion)
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
degree_distribution(net, name = "Test")
degree_distribution(net, name = "Test")
library(NetworkExtintion)
library(NetworkExtintion)
degree_distribution(net, name = "Test")
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
degree_distribution(net, name = "Test")
MostconnectedExp(net)
data(net)
library(NetworkExtintion)
data(net)
MostconnectedExp(net)
class(cumsum)
?cumsum
library(NetworkExtintion)
data("net")
MostconnectedExp(Network = net)
accExt
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
MostconnectedExp(net)
net
matrix(net)
edgelist(net)
library(network)
edgelist(net)
ExtinctionOrder(net, order(2,8,9))
library(NetworkExtintion)
ExtinctionOrder(net, order(2,8,9))
ExtinctionOrder(Network = net, Order = c(2,8,9))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(2,8,9))
MostconnectedExp(net)
library(NetworkExtintion)
MostconnectedExp(net)
library(NetworkExtintion)
MostconnectedExp(net)
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(2,8,9))
library(NetworkExtintion)
MostconnectedExp(net)
library(NetworkExtintion)
chilean_TI_consumercolum_resourcesrow_withhumans_R <- read_excel("C:/Users/Isidora/Google Drive/Doctorado/Tesis/datos/INTERMAREAL/chilean_TI_consumercolum_resourcesrow_withhumans_R.xlsx")
library(readxl)
chilean_TI_consumercolum_resourcesrow_withhumans_R <- read_excel("C:/Users/Isidora/Google Drive/Doctorado/Tesis/datos/INTERMAREAL/chilean_TI_consumercolum_resourcesrow_withhumans_R.xlsx")
chilean <- chilean_TI_consumercolum_resourcesrow_withhumans_R
chilean <- chilean_TI_consumercolum_resourcesrow_withhumans_R[,-1]
MostconnectedExp(chilean)
chilean
chilean <- as.network(chilean, loops = TRUE)
MostconnectedExp(chilean)
Commercial <- c(64,	51,	10,	82,	54,	80,	16,	29,	93,	13,	15,	18,	14,	17,	12,	1,	4,	7,	20)
ExtinctionOrder(chilean, Order= Commercial)
degree_distribution(chilean, name = "Test")
ExtinctionOrder(chilean, Order= Commercial)
a <- ExtinctionOrder(chilean, Order= Commercial)
a$DF
ExtinctionOrder(chilean, Order= Commercial)$DF
library(NetworkExtintion)
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
RandomExtinctions(net)
library(MuMIn)
demo(dredge.subset)
library(MuMIn)
options(na.action = na.fail)
# Fit the 'global model'
fm <- lm(y ~ (X1 + X2 + X3 + X4)^2, data = Cement)
is.correlated <- function(i, j, data, conf.level = .95, cutoff = .5, ...) {
if(j >= i) return(NA)
ct <- cor.test(data[, i], data[, j], conf.level = conf.level, ...)
ct$p.value > (1 - conf.level) || abs(ct$estimate) <= cutoff
}
# Need vectorized function to use with 'outer'
vCorrelated <- Vectorize(is.correlated, c("i", "j"))
# Create logical matrix
smat <- outer(1:4, 1:4, vCorrelated, data = Cement)
smat
Cement
dimnames(smat) <- list(nm, nm)
nm <- colnames(Cement[-1])
nm
dimnames(smat) <- list(nm, nm)
dimnames(smat) <- list(nm, nm)
smat
library(MuMIn)
options(na.action = na.fail)
# Fit the 'global model'
fm <- lm(y ~ (X1 + X2 + X3 + X4)^2, data = Cement)
is.correlated <- function(i, j, data, conf.level = .95, cutoff = .5, ...) {
if(j >= i) return(NA)
ct <- cor.test(data[, i], data[, j], conf.level = conf.level, ...)
ct$p.value > (1 - conf.level) || abs(ct$estimate) <= cutoff
}
# Esto es para vectorizar la funcion
vCorrelated <- Vectorize(is.correlated, c("i", "j"))
# Acá creas la matriz, Ojo, que esto esta armado para que la primera columna sea tu variable respuesta
#aca usamos 1:4 por que tenemos 4 variables explicativas
smat <- outer(1:4, 1:4, vCorrelated, data = Cement)
nm <- colnames(Cement[-1])
dimnames(smat) <- list(nm, nm)
?dredge
library(MuMIn)
options(na.action = na.fail)
# Fit the 'global model'
fm <- lm(y ~ (X1 + X2 + X3 + X4)^2, data = Cement)
# Occupamos esta función para determinar las correlaciones, el cutoff es el que te dice el r en el que cortas
is.correlated <- function(i, j, data, conf.level = .95, cutoff = .5, ...) {
if(j >= i) return(NA)
ct <- cor.test(data[, i], data[, j], conf.level = conf.level, ...)
ct$p.value > (1 - conf.level) || abs(ct$estimate) <= cutoff
}
# Esto es para vectorizar la funcion
vCorrelated <- Vectorize(is.correlated, c("i", "j"))
# Acá creas la matriz, Ojo, que esto esta armado para que la primera columna sea tu variable respuesta
#aca usamos 1:4 por que tenemos 4 variables explicativas
smat <- outer(1:4, 1:4, vCorrelated, data = Cement)
#los dos que vienen son para ponerles nombres a la matriz, esto no es necesario es solo para mirar
nm <- colnames(Cement[-1])
dimnames(smat) <- list(nm, nm)
#Al imprimir esto te da cuales estan y no estan correlacionadas
smat
#Finalmente este dredge con subset te da el modelo
dd2 <- dredge(fm, subset = smat)
##Esto te saca el mejor modelo
get.models(dd2, 1)[[1]]
best.model.no.corr <- get.models(dd2, 1)[[1]]
library(NetworExtinction)
library(NetworExtinction)
remove.packages("NetworkExtintion", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(NetworExtinction)
remove.packages("NetworExtinction", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
data("net")
RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a$sims
View(a$sims)
View(a$sims)
View(a$sims)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
a <- RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 20)
RandomExtinctions(Network = net, nsim = 80)
RandomExtinctions(Network = net, nsim = 100)
RandomExtinctions(Network = net, nsim = 100)
RandomExtinctions(Network = net, nsim = 100)
RandomExtinctions(Network = net, nsim = 500)
RandomExtinctions(Network = net, nsim = 1000)
RandomExtinctions(Network = net, nsim = 4000)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
data(net)
plot(net)
RandomExtinctions(Network = net, nsim = 500)
Mostconnected(Network = net)
library(NetworkExtinction)
library(NetworkExtinction)
install.packages("rootSolve")
library(rootSolve)
fun <- function (x) cos(2*x)^3
curve(fun(x), 0, 8)
abline(h = 0, lty = 3)
uni <- uniroot(fun, c(0, 8))$root
uni
uniroot(fun, c(0, 8))
polyroot(fun, c(0, 8))
polyroot(fun
)
polyroot(fun)
points(uni, 0, pch = 16, cex = 2)
All <- uniroot.all(fun, c(0, 8))
points(All, y = rep(0, length(All)), pch = 16, cex = 2)
uniroot.all(fun, c(0, 8))
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
scales::muted("red")
library(NetworkExtinction)
?ggplot2::scale_fill_manual()
library(NetworkExtinction)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
shQuote(red)
shQuote("red")
library(NetworkExtinction)
shQuote("red")
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
library(NetworkExtinction)
RandomExtinctions(Network = net, nsim = 100)
?dplyr::mutate_if()
log(0)
mtcars
mutate_if(mtcars, is.numeric, log(.x + 1))
dplyr::mutate_if(mtcars, is.numeric, log(.x + 1))
dplyr::mutate_if(mtcars, is.numeric, log(x. + 1))
dplyr::mutate_if(mtcars, is.numeric, log( + 1))
dplyr::mutate_if(mtcars, is.numeric, log(. + 1))
dplyr::mutate_if(mtcars, is.numeric, log(. + 1))
dplyr::mutate_if(mtcars, is.numeric, funs(log(. + 1)))
library(tidyverse)
dplyr::mutate_if(mtcars, is.numeric, funs(log(. + 1)))
mutate_if(mtcars, is.numeric, funs(log(. + 1)))
mutate_if(mtcars, is.numeric, funs(log(.)))
library(rootSolve)
#one diff equation
fun <- function (x) cos(2*x)^3
curve(fun(x), 0, 8)
abline(h = 0, lty = 3)
All <- uniroot.all(fun, c(0, 8))
points(All, y = rep(0, length(All)), pch = 16, cex = 2)
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
?multiroot
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 + x[4] -12
F2 <- x[1]^2 - x[2]   + x[3] - x[4] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1, 1))
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
All <- uniroot.all(fun, c(0, 8))
All
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
multiroot(f = model, start = c(0, 0, 0))
library(rootSolve)
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
ss$root
# first solution
ss <- multiroot(f = model, start = c(10, 10, 10))
ss
# first solution
ss <- multiroot(f = model, start = c(100, 100, 100))
ss
# first solution
ss <- multiroot(f = model, start = c(-2, -100, 100))
# first solution
ss <- multiroot(f = model, start = c(-2, 0, 100))
ss
# first solution
ss <- multiroot(f = model, start = c(100, 100, 100))
ss
library(rootSolve)
#one diff equation
fun <- function (x) cos(2*x)^3
curve(fun(x), 0, 8)
abline(h = 0, lty = 3)
All <- uniroot.all(fun, c(0, 8))
All
curve(fun(x), -2, 10)
abline(h = 0, lty = 3)
All <- uniroot.all(fun, c(-2, 10))
points(All, y = rep(0, length(All)), pch = 16, cex = 2)
All
model <- function(x) {
F1 <- x[1]   + x[2]   + x[3]^2 -12
F2 <- x[1]^2 - x[2]   + x[3] -2
F3 <- 2*x[1] - x[2]^2 + x[3] -1
c(F1 = F1, F2 = F2, F3 = F3)
}
# first solution
ss <- multiroot(f = model, start = c(1, 1, 1))
ss
library(NetworkExtinction)
a <- Mostconnected(Network = net)
b <- RandomExtinctions(Network = net, nsim = 1000)
View(a)
b$sims
View(a)
View(b$sims)
chisq.test(x = a$AccSecondaryExtinction, y = b$sims$AccSecondaryExtinction)
chisq.test(x = a$AccSecondaryExtinction, y = b$sims$AccSecondaryExtinction[1:length(a$AccSecondaryExtinction)])
b$graph
g <- b$graph
g + geom_line(data = a)
library(ggplot2)
g + geom_line(data = a)
g + geom_line(data = a, lty = 2)
g + geom_point(data = a) + geom_line(data = a, lty = 2)
b
library(NetworkExtinction)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = NullHyp)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
History <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
?class
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
class(History)
class(NullHyp)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
class(NullHyp)
class(History)
class(History) == "Mostconnected"
data("net")
History <- Mostconnected(Network = net)
class(History)[2] == "Mostconnected"
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
History <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
a$DF
library(NetworkExtinction)
library(NetworkExtinction)
data("net")
History <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
?chisq.test
data("net")
History <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
History <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
NullHyp <- RandomExtinctions(Network = net, nsim = 1000)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
a <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
a$graph
g <- a$graph
g + scale_linetype_manual(values = c("1, 2"), label = c("Expected", "Observed"))
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison$graph
Comparison$Test
Comparison$Test$p.value
round(Comparison$Test$p.value, 2)
library(NetworkExtinction)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 1000)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
