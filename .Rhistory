}
return(DF)
}
Mostconnected()
Mostconnected(net)
Toy_model <- read_excel("/home/derek/Documents/NetworkExtintion/Toy model.xlsx")
Toy_model <- Toy_model[,-1]
net <- as.network(Toy_model, loops = TRUE)
edgelist <- as.matrix(net,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:10, Grado = degree(edgelist, c("total")))
Conected
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, length(network.size(Network))), nodesS = rep(NA, length(network.size(Network))), linksS = rep(NA, length(network.size(Network))),  indegreecero = rep(NA,length(network.size(Network))))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
return(DF)
}
Mostconnected(net)
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
return(DF)
}
Mostconnected(net)
Mostconnected(net)
Mostconnected(net)
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
DF <- DF[complete.cases(DF),]
return(DF)
}
DF
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
DF <- DF[complete.cases(DF),]
return(DF)
}
Mostconnected(net)
class(net)
devtools::use_data(net)
net
class(net)
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
Mostconnected(Network = net)
library(NetworkExtintion)
library(NetworkExtintion)
?Mostconnected
getwd()
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
Mostconnected(Network = net)
install.packages("devtools")
devtools::install_github("derek-corcoran-barrios/NetworkExtintion")
library(NetworkExtintion)
devtools::install_github("derek-corcoran-barrios/NetworkExtintion")
library(NetworkExtintion)
library(NetworkExtintion)
?Mostconnected
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
Mostconnected(Network = net)
data("net")
a <- Mostconnected(Network = net)
a
library(ggplot2)
ggplot(a, x = 1:nrow(a), aes(y = nodesS)) + geom_line()
ggplot(a, x = 1:nrow(a), aes(y = nodesS)) + geom_line()
ggplot(a, aes(x = 1:nrow(a), y = nodesS)) + geom_line()
ggplot(a, aes(x = 1:nrow(a), y = nodesS)) + geom_line() + ylab("Species remaining") + number of exctinctions
ggplot(a, aes(x = 1:nrow(a), y = nodesS)) + geom_line() + ylab("Species remaining") + xlab("number of exctinctions")
a
cumsum(a$indegreecero)
1:nrow(a)
?sample
sample(x = 1:nrow(a), size = nrow(a))
sample(x = 1:nrow(a), size = nrow(a))
sample(x = 1:nrow(a), size = nrow(a))
sample(x = 1:nrow(a), size = nrow(a))
sample(x = 1:nrow(a), size = nrow(a))
sample(x = 1:nrow(a), size = nrow(a))
sample(x = 1:nrow(a), size = nrow(a))
net
plot(net)
Network = data(net)
plot(Network)
data(net)
Network <- net
plot(Network)
edgelist <- as.matrix.network.edgelist(Network,matrix.type="edgelist") #Prey - Predator
library(network)
library(network)
edgelist <- as.matrix.network.edgelist(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
library(sna)
edgelist <- as.matrix.network.edgelist(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
View(Conected)
Order = c(1,2,3,4,5,6,7,8,9,10)
Conected1<-  Order
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
View(DF)
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix.network.edgelist(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
DF <- DF[complete.cases(DF),]
return(DF)
DF$Cumsec <- cumsum(DF$indegreecero)
ggplot(DF, aes(x = 1:nrow(DF), y = nodesS)) + geom_line() + ylab("Species remaining") + xlab("number of exctinctions")
ggplot(DF, aes(x = 1:nrow(DF), y = Cumsec)) + geom_line() + ylab("Secondary extinctions") + xlab("number of exctinctions")
DF$NumExt <- 1:nrow(DF)
ggplot(DF, aes(x = NumExt, y = Cumsec)) + geom_line() + ylab("Secondary extinctions") + xlab("number of exctinctions")
DF
ggplot(DF, aes_string(x = "NumExt", y = "Cumsec")) + geom_line() + ylab("Secondary extinctions") + xlab("number of exctinctions")
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
library(NetworkExtintion)
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
ExtinctionOrder(Network = net, Order = c(1,2,3))
ExtinctionOrder(Network = net, Order = c(1,2,3))
ExtinctionOrder(Network = net, Order = c(1,2,3))
ExtinctionOrder(Network = net, Order = c(1,2,3))
ExtinctionOrder(Network = net, Order = c(1))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(1))
ExtinctionOrder(Network = net, Order = c(1,2))
ExtinctionOrder(Network = net, Order = c(1,2))
ExtinctionOrder(Network = net, Order = c(1))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(1))
ExtinctionOrder(Network = net, Order = c(1,4,5))
SpatialBall::DefShotSeasonGraphTeam()
SpatialBall::DefShotSeasonGraphTeam
?ggplot
?ggplot
SpatialBall::DefShotSeasonGraphTeam
ExtinctionOrder(Network = net, Order = c(1,4,5))
ExtinctionOrder(Network = net, Order = c(1,5,6,7,8,9))
ExtinctionOrder(Network = net, Order = c(1))
ExtinctionOrder(Network = net, Order = c(1,5,6,7,8,9))
ExtinctionOrder(Network = net, Order = c(9))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(9))
ExtinctionOrder(Network = net, Order = c(9,7,1))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(9,7,1))
ExtinctionOrder(Network = net, Order = c(9,4,1))
ExtinctionOrder(Network = net, Order = c(9,4,1,6))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = c(9,4,1,6))
ExtinctionOrder(Network = net, Order = c(9,4,1,3,6.7))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
library(NetworkExtintion)
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
ExtinctionOrder(Network = net, Order = sample(1:10, 10))
citation()
citation("MuMIn")
install.packages("phaseR")
install.packages("QPot")
library(QPot)
model.state <- c(x = 3, y = 3)
model.sigma <- 0.2
model.deltat <- 0.1
model.time <- 100
# Second, write out the deterministic skeleton of the equations to be simulated
equationx <- "1.54*x*(1.0-(x/10.14)) - (y*x*x)/(1.0 + x*x)"
equationy <- "((0.476*x*x*y)/(1 + x*x)) - 0.112590*y*y"
# Third, Run it
ModelOut <- TSTraj(y0 = model.state, time = model.time, deltat = model.deltat,
x.rhs = equationx, y.rhs = equationy, sigma = model.sigma)
# Can also input x.rhs and y.rhs as strings that contain parameter names
# and include parms with names and values of parameters
model.state <- c(x = 1, y = 2)
model.parms <- c(alpha = 1.54, beta = 10.14, delta = 1, kappa = 1, gamma = 0.476, mu = 0.112509)
model.sigma <- 0.2
model.time <- 100
model.deltat <- 0.1
test.eqn.x = "(alpha*x)*(1-(x/beta)) - ((delta*(x^2)*y)/(kappa + (x^2)))"
test.eqn.y = "((gamma*(x^2)*y)/(kappa + (x^2))) - mu*(y^2)"
ModelOut.parms <- TSTraj(y0 = model.state, time = model.time, deltat = model.deltat,
x.rhs = test.eqn.x, y.rhs = test.eqn.y, parms = model.parms, sigma = model.sigma)
ModelOut.parms
demo("QPot")
# First, the parameter values, as found in TSTraj
model.state <- c(x = 3, y = 3)
model.sigma <- 0.2
model.deltat <- 0.05
model.time <- 100
# Second, write out the deterministic skeleton of the equations to be simulated,
# as found in TSTraj
#Example 1 from article
equationx <- "1.54*x*(1.0-(x/10.14)) - (y*x*x)/(1.0 + x*x)"
equationy <- "((0.476*x*x*y)/(1 + x*x)) - 0.112590*y*y"
# Third, run it, as found in TSTraj
ModelOut <- TSTraj(y0 = model.state, time = model.time, deltat = model.deltat,
x.rhs = equationx, y.rhs = equationy, sigma = model.sigma)
# Fourth, plot it:
# in 1D
TSPlot(ModelOut, deltat = model.deltat, dim = 1)
# in 2D
TSPlot(ModelOut, deltat = model.deltat, dim = 2)
library("devtools", lib.loc="~/R/win-library/3.4")
detach("package:devtools", unload=TRUE)
library(NetworkExtintion)
###############################################
#Intertidal
###############################################
chilean_TI_consumercolum_resourcesrow_withhumans_R <- read_excel("C:/Users/Isidora/Google Drive/Doctorado/Tesis/datos/INTERMAREAL/chilean_TI_consumercolum_resourcesrow_withhumans_R.xlsx")
