#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>% as.data.frame() %>% tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Mat
Adjacency <- as.matrix.network.adjacency(Mat)
Adjacency
library(network)
library(igraph)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
View(m)
library(network)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Adjacency <- as.matrix.network.adjacency(Mat)
library(network)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Adjacency <- network::as.matrix.network.adjacency(Mat)
library(network)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.6), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Adjacency <- network::as.matrix.network.adjacency(Mat)
View(Adjacency)
set.seed(2020)
m <- matrix(rpois(100, lambda = 2), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
Mat <- network::as.network(as.matrix(m[,-1]))
View(m)
View(Mat)
Adjacency <- network::as.matrix.network.adjacency(Mat)
View(Adjacency)
?as.matrix.network.adjacency()
as.matrix.network.incidence(Mat)
as_adj(Mat)
as_adj(as.igraph(Mat))
?as_adj()
g <- sample_gnp(10, 2/10)
as_adjacency_matrix(g)
as_adjacency_matrix(g)
E(g)$weight <- runif(ecount(g))
as_adjacency_matrix(g, attr="weight")
g
library(NetworkExtinction)
?SimulateExtinctions
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
data("net")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
library(NetworkExtinction)
?SimulateExtinctions
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
#Second Ordered example
library(NetworkExtinction)
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
library(NetworkExtinction)
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
#first Ordered example
data("net")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
library(NetworkExtinction)
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
#first Ordered example
data("net")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
#Second Ordered example
data("net")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
#Second Ordered example
SimulateExtinctions(Network = net, Method = "Mostconnected")
Network = net
DF1 <- data.frame(Spp = rep(NA, network.size(Network)), S = rep(NA, network.size(Network)), L = rep(NA, network.size(Network)), C = rep(NA, network.size(Network)), Link_density = rep(NA, network.size(Network)),SecExt = rep(NA,network.size(Network)), Pred_release = rep(NA,network.size(Network)), Iso_nodes =rep (NA,network.size(Network)))
library(network)
DF1 <- data.frame(Spp = rep(NA, network.size(Network)), S = rep(NA, network.size(Network)), L = rep(NA, network.size(Network)), C = rep(NA, network.size(Network)), Link_density = rep(NA, network.size(Network)),SecExt = rep(NA,network.size(Network)), Pred_release = rep(NA,network.size(Network)), Iso_nodes =rep (NA,network.size(Network)))
DF2 <- data.frame(Spp = rep(NA, network.size(Network)), S = rep(NA, network.size(Network)), L = rep(NA, network.size(Network)), C = rep(NA, network.size(Network)),  SecExt = rep(NA,network.size(Network)), Pred_release = rep(NA,network.size(Network)))
colnames(DF1)
colnames(DF2)
library(NetworkExtinction)
SimulateExtinctions(Network = net, Method = "Mostconnected")
SimulateExtinctions(Network = net, Method = "Mostconnected")
SimulateExtinctions(Network = net, Method = "Mostconnected")
#first Ordered example
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
library(NetworkExtinction)
?ordinal::clmm
library(MCMCglmm)
install.packages("ordinal")
library(NetworkExtinction)
?DegreeDistribution
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
data("net")
ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
DegreeDistribution(chilean_intertidal)
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
data("net")
class(net)
data("More_Connected")
RandomExtinctions(Network = More_Connected, nsim = 5)
data("More_Connected")
RandomExtinctions(Network = More_Connected, nsim = 10)
library(NetworkExtinction)
data("net")
class(net)
plo(net)
plot(net)
data("chilean_intertidal")
class(chilean_intertidal)
plot(chilean_intertidal)
?RandomExtinctions
data("More_Connected")
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
data("More_Connected")
RandomExtinctions(Network = More_Connected, nsim = 20)
data("More_Connected")
a <- RandomExtinctions(Network = More_Connected, nsim = 20)
cores <- ceiling(parallel::detectCores()/2)
a <- RandomExtinctions(Network = More_Connected, nsim = 20, parallel = TRUE, ncores = cores)
NumExt <- sd <- AccSecExt <- AccSecExt_95CI <- AccSecExt_mean <- Lower <- NULL
network <- Network
Network = chilean_intertidal
sims <- list()
nsims = 10
i = 1
sims[[i]] <- try(.ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF, silent = T)
sims[[i]]$simulation <- i
for(i in 1:nsim){
sims[[i]] <- try(.ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF, silent = T)
sims[[i]]$simulation <- i
message(paste("Simulation", i, "of", nsim, "ready"))
}
nsim = 20
sims <- list()
for(i in 1:nsim){
sims[[i]] <- try(.ExtinctionOrder(Network = network, Order = sample(1:network.size(network)))$DF, silent = T)
sims[[i]]$simulation <- i
message(paste("Simulation", i, "of", nsim, "ready"))
}
sims
sims <- list()
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
sims[[i]] <- try(.ExtinctionOrder(Network = network, Order = sample(1:network.size(network))), silent = T)
i = 1
sims[[i]] <- try(.ExtinctionOrder(Network = network, Order = sample(1:network.size(network))), silent = T)
sims[[i]]$simulation <- i
sims[[i]]
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
a <- RandomExtinctions(Network = More_Connected, nsim = 20)
a[[1]]
a[[1]] %>% class
a[[1]][[1]] %>% class
a$sims[[1]]
a$sims[[1]] %>% class
class(a$sims[[1]])
cond <- sapply(a$sims, function(x) class(x) == "data.frame")
cond
cond <- sapply(a$sims, function(x) class(x) %in% "data.frame")
cond
cond <- sapply(a$sims, function(x) "data.frame" %in% class(x))
cond
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
RandomExtinctions(Network = More_Connected, nsim = 20)
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
library(NetworkExtinction)
RandomExtinctions(Network = More_Connected, nsim = 20)
RandomExtinctions(Network = More_Connected, nsim = 10)
a <- RandomExtinctions(Network = More_Connected, nsim = 10)
a
library(NetworkExtinction)
a <- RandomExtinctions(Network = More_Connected, nsim = 10)
a[[1]]
a
library(NetworkExtinction)
a
a <- RandomExtinctions(Network = More_Connected, nsim = 10)
a
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[5]]
a %>% mutate(simulation = 20)
library(dplyr)
a %>% mutate(simulation = 20)
a[[1]] %>% mutate(simulation = 20)
a[[2]] %>% mutate(simulation = 20)
a[[2]]
a[[2]] %>% class
a[[2]]
a[[2]] %>% mutate(simulation = 20)
mutate()
a[[2]]
a[[2]] %>% class
library(NetworkExtinction)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE
)
knitr::opts_chunk$set(fig.width=6, fig.height=4, message = FALSE)
library(NetworkExtinction)
a<- matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0),nrow=10, ncol=10)
a
library(network)
net <- as.network(a, loops = TRUE)
net
library(NetworkExtinction)
data("net")
Mostconnected(Network = net)
?SimulateExtinctions
library(NetworkExtinction)
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
library(NetworkExtinction)
data("net")
knitr::kable(SimulateExtinctions(Network = net, Method = "Mostconnected"), caption = "Table 1: The resulting dataframe of the SimulateExtinctions in Mostconnected method")
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
ExtinctionPlot(History = history, Variable = "AccSecExt")
data("net")
SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
data("net")
knitr::kable(SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered"), caption = "Table 2: The resulting dataframe of the ExtinctionOrder function")
data("net")
Order <- SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 100)
data(net)
set.seed(707)
Test <- RandomExtinctions(Network= net, nsim= 100)
knitr::kable(Test, caption = "Table 3: The resulting dataframe of the RandomExtinctions function")
?RandomExtinctions
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 100, plot = T)
#Test$graph
data(net)
set.seed(707)
Test <- RandomExtinctions(Network= net, nsim= 100, plot = T)
Test$graph
data("net")
History <- SimulateExtinctions(Network = net, #Order = c(1,2,3,4,5,6,7,8,9,10),
Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
History
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
class(History)
library(NetworkExtinction)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE
)
knitr::opts_chunk$set(fig.width=6, fig.height=4, message = FALSE)
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
NullHyp <- RandomExtinctions(Network = net, nsim = 100, plot = T)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
library(NetworkExtinction)
?Deprecated
?SimulateExtinctions
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
devtools::install_github("r-lib/usethis")
plot(1:1e3, 1-pexp(1:1e3, rate = 1))
plot(1:1e3, 1-pexp(1:1e3, rate = 100))
plot(1:1e3, 1-pexp(1:1e3, rate = 0.0001))
plot(1:1e3, 1-pexp(1:1e3, rate = 0.001))
plot(1:1e3, 1-pexp(1:1e3, rate = 0.01))
if(parallel){
cl <- makeCluster(ncores)
registerDoParallel(cl)
parallel::clusterExport(cl,
varlist = c("network", "SimNum", "IS", "Rewiring", "RewiringDist", "RewiringProb"),
envir = environment()
)
sims <- foreach(i=1:nsim, .packages = "NetworkExtinction")%dopar%{
sims <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network), size = SimNum),
IS = IS, NetworkType = NetworkType,
Rewiring = Rewiring, RewiringDist = RewiringDist,
verbose = FALSE, RewiringProb = RewiringProb), silent = TRUE)
try({sims$simulation <- i}, silent = TRUE)
sims
}
stopCluster(cl)
}else{
sims <- list()
for(i in 1:nsim){
sims[[i]] <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network), size = SimNum),
IS = IS, NetworkType = NetworkType,
Rewiring = Rewiring, RewiringDist = RewiringDist,
verbose = FALSE, RewiringProb = RewiringProb), silent = TRUE)
try({sims[[i]]$simulation <- i}, silent = TRUE)
if(verbose){setTxtProgressBar(ProgBar, i)}
}
}
library(NetworkExtinction)
data("chilean_potential")
chilean_potential
diff(2,2)
diff(2,1)
diff(c(1,2))
diff(c(2,2))
diff(c(3,2))
library(NetworkExtinction)
devtools::document()
library(NetworkExtinction)
data("Less_Connected")
Less_Connected
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected", NetworkType = "Mutualistic")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
devtools::document()
library(NetworkExtinction)
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
ExtinctionPlot(History = history)
ExtinctionPlot(History = history$sims)
library(NetworkExtinction)
devtools::check_built(remote = T)
?devtools::check_built()
library(NetworkExtinction)
devtools::check_built("/home/au687614/Documents/NetworkExtinction_1.0.0.tar.gz", remote = T)
565/575
(565/575)*100
(565.9/575.4)*100
((565.9 + 0.4)/575.4)*100
install.packages("gdxrrw")
remotes::install_github("sitscholl/Rgadgets")
library(Rgadgets)
## Allprotections intersects with MARKBLOKORT
## dark grey
library(Rgadgets)
breaks <- 3
cmat <- rg_biv_cmat(breaks, style = 1)
legend <- rg_biv_get_legend(cmat, xlab = 'Gain', ylab = 'Loss')
xy <- rg_biv_create_raster(x, y, breaks)
map <- rg_biv_plot_raster(xy, cmat, border = st_border_proj, xlab = 'Gain', ylab = 'Loss', limits = c(10.7, 12, 46.2, 46.8))
map
## Allprotections intersects with MARKBLOKORT
## dark grey
library(Rgadgets)
library(ggplot2)
breaks <- 3
cmat <- rg_biv_cmat(breaks, style = 1)
legend <- rg_biv_get_legend(cmat, xlab = 'Gain', ylab = 'Loss')
xy <- rg_biv_create_raster(x, y, breaks)
xy <- rg_biv_create_raster(x, y, breaks)
## Allprotections intersects with MARKBLOKORT
## dark grey
library(Rgadgets)
library(ggplot2)
library(GeoStratR)
data("Bios")
plot(Bios)
library(raster)
library(ggplot2)
library(GeoStratR)
data("Bios")
plot(Bios)
breaks <- 3
Temp <- Bios[[1]]
Prec <- Bios[[4]]
data("Bios")
breaks <- 3
Temp <- Bios[[1]]
Prec <- Bios[[4]]
cmat <- rg_biv_cmat(breaks, style = 1)
legend <- rg_biv_get_legend(cmat, xlab = 'Temp', ylab = 'Prec')
xy <- rg_biv_create_raster(Temp, Prec, breaks)
map <- rg_biv_plot_raster(xy, cmat, border = st_border_proj, xlab = 'Gain', ylab = 'Loss', limits = c(10.7, 12, 46.2, 46.8))
xy
plot(xy)
rg_biv_plot_raster(xy, cmat)
rg_biv_plot_raster
rg_biv_plot_raster
rg_biv_plot_raster
bivraster = xy
crs = "+init=epsg:4326"
bivraster %>% raster::projectRaster(crs = crs) %>%
raster::as.data.frame(xy = TRUE)
bivraster %>% raster::projectRaster(crs = crs)
bivraster
crs = "+init=epsg:4326"
bivraster %>% raster::projectRaster(crs = crs)
bivraster %>% #raster::projectRaster(crs = crs) %>%
raster::as.data.frame(xy = TRUE) %>% tibble::as_tibble() %>%
dplyr::rename(BivValue = 3) %>% tidyr::pivot_longer(names_to = "Variable",
values_to = "bivVal", cols = BivValue)
r_df <- bivraster %>% #raster::projectRaster(crs = crs) %>%
raster::as.data.frame(xy = TRUE) %>% tibble::as_tibble() %>%
dplyr::rename(BivValue = 3) %>% tidyr::pivot_longer(names_to = "Variable",
values_to = "bivVal", cols = BivValue)
crs
bivraster %>% raster::projectRaster(crs = crs)
?raster::projectRaster
projectRaster(Bios[[1]], crs = crs)
projectRaster(Bios[[1]], crs = "+init=epsg:4326")
devtools::check(remote = T)
devtools::check(remote = T)
library(NetworkExtinction)
library(NetworkExtinction)
install.packages("pkgdown")
install.packages("ragg")
install.packages("ragg")
