Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$family <- "Exponential"
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
For.Graph <- full_join(For.Graph, power)
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
head(For.Graph)
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.logpower$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"
head(For.Graph)
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"
For.Graph
head(For.Graph)
For.Graph <- full_join(For.Graph, LogPower)
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
For.Graph <- full_join(For.Graph, power)
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
For.Graph <- full_join(power)
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1$models
fit1$graph
library(tidyverse)
library(sna)
Network <- chilean_intertidal
name = "caca"
AIC <- Cumulative <- Exp <- fit <- model <- LogPower <- logLik <- BIC <- Power <- Normal.Resid <- LogExp <- family <- AICcNorm <- NULL
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA, Scenario = name)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$family <- "Exponential"
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
For.Graph <- full_join(For.Graph, power)
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.logpower$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"
head(For.Graph)
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"
For.Graph <- full_join(For.Graph, power)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1
fit2 <- degree_distribution(More_Connected, name = "Test")
fit2
fit3 <- degree_distribution(Less_Connected, name = "Test")
fit3
fit1
predict(logexp.model)
predict(logexp.model, se.fit = T)
predict(logexp.model, se.fit = T)$se.fit
predict(exp.mode, se.fit)
predict(exp.model, se.fit)
predict(exp.model, se.fit = T)
predict(exp.model)
pkgdown::build_site()
library(NetworkExtinction)
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test")
fit1
fit1 <- degree_distribution(chilean_intertidal, name = "Test", scale = "loglog")
fit1
?degree_distribution
degree_distribution
fit1 <- degree_distribution(chilean_intertidal, name = "Test", scale = "LogLog")
fit1
library(NetworkExtinction)
fit1 <- degree_distribution(chilean_intertidal, name = "Test", scale = "LogLog")
fit1 <- degree_distribution(chilean_intertidal, scale = "LogLog")
fit1$graph
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_site()
library(NetworkExtinction)
library(NetworkExtinction)
install.packages("dlstats")
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
?Mostconnected
data("net")
Mostconnected(Network = net)
data("chilean_intertidal")
Mostconnected(Network = chilean_intertidal)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
colnames(a)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(A)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
colnames(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
colnames(a)
(1*4000) + (2*4000)
(1*4000) + (2*4000) + (0.5*6600)
(1*4000) + (2*4000) + (0.5*6600) + 11000
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (1000*5.8)
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (10000*0.58)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (10000*0.58)
?ExtinctionOrder
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
colnames(a)
colnames(a$DF)
library(NetworkExtinction)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
colnames(a$DF)
a$Graph
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
library(NetworkExtinction)
data("chilean_intertidal")
a <- Mostconnected(Network = chilean_intertidal)
View(a)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
a$Graph
library(NetworkExtinction)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
library(NetworkExtinction)
data("net")
a <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
a$Graph
(1*4000) + (2*4000) + (0.5*6600) + 11000 + 1800 + 2000 + (10000*0.58)
11000 + 3300 + 2000 + 0.58*6500 + 12000 + 1800
10000*0.58
6500*0.58
library(NetworkExtinction)
?CompareExtinctions
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
NullHyp$sims
NullHyp$graph
?confint()
NullHyp$sims
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
NullHyp
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
?RandomExtinctions
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 500, parallel = TRUE, ncores = 3)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
History <- Mostconnected(Network = net)
NullHyp <- RandomExtinctions(Network = net, nsim = 500, parallel = TRUE, ncores = 3, Record = T)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
NullHyp$FullSims
NullHyp$FullSims %>% View()
View(NullHyp$FullSims)
library(NetworkExtinction)
View(NullHyp$FullSims)
library(NetworkExtinction)
library(NetworkExtinction)
pkgdown::build_reference()
pkgdown::build_home()
pkgdown::build_articles()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE
)
knitr::opts_chunk$set(fig.width=6, fig.height=4, message = FALSE)
a<- matrix(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0),nrow=10, ncol=10)
a
library(network)
net <- as.network(a, loops = TRUE)
net
library(NetworkExtinction)
data("net")
Mostconnected(Network = net)
data("net")
history <- Mostconnected(Network = net)
ExtinctionPlot(History = history, Variable = "AccSecExt")
data("net")
ExtinctionOrder(Network = net, Order = c(2,4,7))
data("net")
knitr::kable(ExtinctionOrder(Network = net, Order = c(2,4,7))$DF, caption = "Table 2: The resulting dataframe of the ExtinctionOrder function")
data("net")
ExtinctionOrder(Network = net, Order = c(2,4,7))$Graph
data(net)
RandomExtinctions(Network= net, nsim= 50)
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 50)
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 50)
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 100)
?.Deprecated()
?lifecycle::deprecate_soft()
?raster::getData
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE
)
knitr::opts_chunk$set(fig.width=6, fig.height=4, message = FALSE)
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 100)
data(net)
set.seed(707)
Test <- RandomExtinctions(Network= net, nsim= 100)
knitr::kable(Test$sims, caption = "Table 3: The resulting dataframe of the RandomExtinctions function")
data(net)
set.seed(123)
Test$graph
data(net)
set.seed(707)
Test$graph
data("net")
History <- ExtinctionOrder(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10))
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison$graph
data(net)
history <- Mostconnected(Network = net)
ExtinctionPlot(History = history)
ExtinctionPlot(History = history, Variable = "Link_density")
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
?SimulateExtinctions
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
NetworkExtinction::DergreeDistribution(chilean_intertidal)
library(NetworkExtinction)
DegreeDistribution(chilean_intertidal)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE
)
knitr::opts_chunk$set(fig.width=6, fig.height=4, message = FALSE)
data(net)
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
ExtinctionPlot(History = history)
library(NetworkExtinction)
library(NetworkExtinction)
?Mostconnected
data("net")
Mostconnected(Network = net)
library(NetworkExtinction)
SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
library(NetworkExtinction)
SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
SimulateExtinctions(Network = net, Method = "Mostconnected")
suppressMessages()
?suppressMessages
library(NetworkExtinction)
SimulateExtinctions(Network = net, Method = "Mostconnected")
SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
a <- SimulateExtinctions(Network = net, Method = "Mostconnected")
a
library(NetworkExtinction)
SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
SimulateExtinctions(Network = net, Method = "Mostconnected")
data("net")
Mostconnected(Network = net)
?NetworkExtinction::ExtinctionPlot()
library(NetworkExtinction)
data("net")
Mostconnected(Network = net)
?help"Deprecated"
?Deprecated
library(NetworkExtinction)
data("net")
Mostconnected(Network = net)
igrapj
?igraph::as.igraph()
library(network)
m <- rbinom(100, size = 1, prob = 0.1)
m
m <- rbinom(100, size = 1, prob = 0.3)
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T)
library(tidyverse)
library(network)
library(igraph)
library(tidyverse)
set.seed(2020)
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>% as.data.frame() %>% tibble::rowid_to_column()
View(m)
library(network)
library(igraph)
library(tidyverse)
set.seed(2020)
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>% as.data.frame() %>% tibble::rowid_to_column()
Mat <- igraph::as.igraph(as.matrix(m[,-1]))
?network::as.network()
library(network)
library(igraph)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>% as.data.frame() %>% tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Mat
Adjacency <- as.matrix.network.adjacency(Mat)
Adjacency
library(network)
library(igraph)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
View(m)
library(network)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Adjacency <- as.matrix.network.adjacency(Mat)
library(network)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.3), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Adjacency <- network::as.matrix.network.adjacency(Mat)
library(network)
library(tidyverse)
set.seed(2020)
#Simular una base de datos como la que tiene Pame
m <- matrix(rbinom(100, size = 1, prob = 0.6), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
## Transformar en red
Mat <- network::as.network(as.matrix(m[,-1]))
Adjacency <- network::as.matrix.network.adjacency(Mat)
View(Adjacency)
set.seed(2020)
m <- matrix(rpois(100, lambda = 2), ncol = 10, byrow = T) %>%
as.data.frame() %>%
tibble::rowid_to_column()
Mat <- network::as.network(as.matrix(m[,-1]))
View(m)
View(Mat)
Adjacency <- network::as.matrix.network.adjacency(Mat)
View(Adjacency)
?as.matrix.network.adjacency()
as.matrix.network.incidence(Mat)
as_adj(Mat)
as_adj(as.igraph(Mat))
?as_adj()
g <- sample_gnp(10, 2/10)
as_adjacency_matrix(g)
as_adjacency_matrix(g)
E(g)$weight <- runif(ecount(g))
as_adjacency_matrix(g, attr="weight")
g
library(NetworkExtinction)
?SimulateExtinctions
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected")
data("net")
SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
