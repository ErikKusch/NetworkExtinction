Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$family <- "Exponential"
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
}, error = function(e) {
# display error message when there is an error
message("Could not fit Exponential model: ", e$message)
# set Summs.exp to NULL when there is an error
Summs.exp <- NULL
})
#exponential model Log
tryCatch({
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"}, error = function(e) {
# display error message when there is an error
message("Could not fit Logexponential model: ", e$message)
# set Summs.exp to NULL when there is an error
Summs.logexp <- NULL
})
#logpowerlaw
tryCatch({
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
For.Graph <- full_join(For.Graph, power)
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.logpower$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"}, error = function(e) {
# display error message when there is an error
message("Could not fit Logpower model: ", e$message)
# set Summs.exp to NULL when there is an error
Summs.logpower <- NULL
})
#powerlaw
tryCatch({
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
For.Graph <- full_join(For.Graph, power)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"}, error = function(e) {
# display error message when there is an error
message("Could not fit Power model: ", e$message)
# set Summs.exp to NULL when there is an error
Summs.power <- NULL
})
list(Summs.exp, Summs.power, Summs.logexp, Summs.logpower)
Summs.exp
Summs.power
#powerlaw
tryCatch({
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
For.Graph <- full_join(For.Graph, power)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"}, error = function(e) {
# display error message when there is an error
message("Could not fit Power model: ", e$message)
# set Summs.exp to NULL when there is an error
Summs.power <- NULL
})
Summs.power
#powerlaw
tryCatch({
powerlaw.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
power$Power <- predict(powerlaw.model)
For.Graph <- full_join(For.Graph, power)
Summs.power <- glance(powerlaw.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid  <- ifelse(tidy(ks.test(augment(powerlaw.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "PowerLaw"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(powerlaw.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(powerlaw.model)) - 1))
Params.power <- tidy(powerlaw.model)
Params.power$model <- "Power"}, error = function(e) {
# display error message when there is an error
message("Could not fit Power model: ", e$message)
# set Summs.power to NULL when there is an error
Summs.power <- NULL
})
Summs.power
#powerlaw
tryCatch({
power.model <- nls(Cumulative~a*x^b, start = list(a=1, b=1), data = For.Graph)
message("Power model fitting succeeded!")
For.Graph$Power <- predict(power.model)
Summs.power <- glance(power.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid <- ifelse(tidy(ks.test(augment(power.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "Power"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(power.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(power.model)) - 1))
Params.power <- tidy(power.model)
Params.power$model <- "Power"
message("Creating Summs.power object...")
# add code to handle successful execution of the model
}, error = function(e) {
# display error message when there is an error
message("Could not fit Power model: ", e$message)
# set Summs.power to NULL when there is an error
Summs.power <- NULL
})
#powerlaw
tryCatch({
power.model <- nls(Cumulative~a*x^b, start = list(a=1, b=1), data = For.Graph)
message("Power model fitting succeeded!")
For.Graph$Power <- predict(power.model)
Summs.power <- glance(power.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid <- ifelse(tidy(ks.test(augment(power.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "Power"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(power.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(power.model)) - 1))
Params.power <- tidy(power.model)
Params.power$model <- "Power"
message("Creating Summs.power object...")
# add code to handle successful execution of the model
}, error = function(e) {
# display error message when there is an error
message("Could not fit Power model: ", e$message)
# set Summs.power to NULL when there is an error
Summs.power <- NULL
})
exists(Summs.power)
if(!exists("Summs.power")) {
Summs.power <- NULL
}
Summs.power
Summs.exp
if(!exists("Summs.exp")) {
Caca <- NULL
}
caca
usethis::use_package("purrr")
?purrr::discard
data("chilean_intertidal")
a <- DegreeDistribution(chilean_intertidal)
a
library(NetworkExtinction)
data("chilean_intertidal")
b <- DegreeDistribution(chilean_intertidal)
b
b
b <- DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
Network <- chilean_intertidal
Network <- .DataInit(Network)
totaldegree<- degree(Network)
K <- 0:max(totaldegree)
For.Graph<- data.frame(K = K, Cumulative = NA)
View(For.Graph)
for(i in 1:length(K)){
For.Graph$Cumulative[i] <- sum(totaldegree>K[i])/length(totaldegree)
}
For.Graph <- For.Graph %>% mutate(LogK = log(K), LogCum = log(Cumulative))
#exponential model nls
tryCatch({
exp.model <- nls(Cumulative~exp(K*lambda+ c),start= list(lambda=0.1, c = 0), data = For.Graph)
For.Graph$Exp <- predict(exp.model)
Summs.exp <- glance(exp.model)
Summs.exp$model <- "Exp"
Summs.exp$Normal.Resid <- ifelse(tidy(ks.test(augment(exp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.exp$family <- "Exponential"
Summs.exp$AICcNorm <- logLik(MASS::fitdistr(augment(exp.model)$.resid, "normal"))[1]
Summs.exp$AICcNorm <- (4 - 2*Summs.exp$AICcNorm) + (12/(nrow(augment(exp.model)) - 1))
Params.exp <- tidy(exp.model)
Params.exp$model <- "Exp"
}, error = function(e) {
# display error message when there is an error
message("Could not fit Exponential model: ", e$message)
})
if(!exists("Summs.exp")) {
Summs.exp <- NULL
}
if(!exists("Params.exp")) {
Params.exp <- NULL
}
#exponential model Log
tryCatch({
power <- filter(For.Graph, K != 0 & Cumulative != 0)
logexp.model <- glm(LogCum ~ K, data = power)
power$LogExp <- exp(predict(logexp.model))
Summs.logexp <- glance(logexp.model)
Summs.logexp$model <- "LogExp"
Summs.logexp$Normal.Resid <- ifelse(tidy(ks.test(augment(logexp.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logexp$family <- "Exponential"
Summs.logexp$AICcNorm <- logLik(MASS::fitdistr(augment(logexp.model)$.resid, "normal"))[1]
Summs.logexp$AICcNorm <- (4 - 2*Summs.logexp$AICcNorm) + (12/(nrow(augment(logexp.model)) - 1))
Params.logexp <- tidy(logexp.model)
Params.logexp$model <- "LogExp"}, error = function(e) {
# display error message when there is an error
message("Could not fit Logexponential model: ", e$message)
})
if(!exists("Summs.logexp")) {
Summs.logexp <- NULL
}
if(!exists("Params.logexp")) {
Params.logexp <- NULL
}
#logpowerlaw
tryCatch({
logpower.model <- glm(LogCum ~ I(log(K)), data = power)
power$LogPower <- exp(predict(logpower.model))
For.Graph <- full_join(For.Graph, power)
Summs.logpower <- glance(logpower.model)
Summs.logpower$model <- "LogPower"
Summs.logpower$Normal.Resid <- ifelse(tidy(ks.test(augment(logpower.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.logpower$family <- "PowerLaw"
Summs.logpower$AICcNorm <- logLik(MASS::fitdistr(augment(logpower.model)$.resid, "normal"))[1]
Summs.logpower$AICcNorm <- (4 - 2*Summs.logpower$AICcNorm) + (12/(nrow(augment(logpower.model)) - 1))
Params.logpower <- tidy(logpower.model)
Params.logpower$model <- "LogPower"}, error = function(e) {
# display error message when there is an error
message("Could not fit Logpower model: ", e$message)
})
if(!exists("Summs.logpower")) {
Summs.logpower <- NULL
}
if(!exists("Params.logpower")) {
Params.logpower <- NULL
}
#powerlaw
tryCatch({
power.model <- nls(Cumulative~a*x^b, start = list(a=1, b=1), data = For.Graph)
For.Graph$Power <- predict(power.model)
Summs.power <- glance(power.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid <- ifelse(tidy(ks.test(augment(power.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "Power"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(power.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(power.model)) - 1))
Params.power <- tidy(power.model)
Params.power$model <- "Power"
}, error = function(e) {
# display error message when there is an error
message("Could not fit Power model: ", e$message)
})
power.model <- nls(Cumulative~a*x^b, start = list(a=1, b=1), data = For.Graph)
power.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
library(NetworkExtinction)
library(NetworkExtinction)
b <- DegreeDistribution(chilean_intertidal)
power.model <- nls(Cumulative~a*K^y, start= list(y=0, a = 1), data = power)
For.Graph$Power <- predict(power.model)
power$Power <- predict(powerlaw.model)
power$Power <- predict(power.model)
For.Graph <- full_join(For.Graph, power)
Summs.power <- glance(power.model)
Summs.power$model <- "Power"
Summs.power$Normal.Resid <- ifelse(tidy(ks.test(augment(power.model)$.resid,y='pnorm',alternative='two.sided'))$p.value < 0.05, "No", "Yes")
Summs.power$family <- "Power"
Summs.power$AICcNorm <- logLik(MASS::fitdistr(augment(power.model)$.resid, "normal"))[1]
Summs.power$AICcNorm <- (4 - 2*Summs.power$AICcNorm) + (12/(nrow(augment(power.model)) - 1))
Params.power <- tidy(power.model)
Params.power <- tidy(power.model)
Params.power$model <- "Power"
library(NetworkExtinction)
b <- DegreeDistribution(chilean_intertidal)
identical(a,b)
a$DDvalues
identical(a, b)
head(a$DDvalues)
head(b$DDvalues)
tail(b$DDvalues)
tail(a$DDvalues)
colnames(a$DDvalues)
colnames(b$DDvalues)
install.packages("arsenal")
arsenal::comparedf(a$DDvalues, b$DDvalues)
class(a$DDvalues)
class(b$DDvalues)
arsenal::comparedf(a$DDvalues, b$DDvalues)
b$models
a$models
library(NetworkExtinction)
b <- DegreeDistribution(chilean_intertidal)
identical(a, b)
identical(a$DDvalues, b)
identical(a$DDvalues, b$DDvalues)
identical(a$models, b$DDvalues)
identical(a$models, b$models)
identical(a$graph, b$graph)
library(patchwork)
a$graph/b$graph
identical(a$params, b$params)
identical(a$DDvalues, b$DDvalues)
identical(a$models, b$models)
identical(a$params, b$params)
DegreeDistribution(chilean_intertidal)
unlink("README_cache", recursive = TRUE)
unlink("README_cache", recursive = TRUE)
library(NetworkExtinction)
unlink("README_cache", recursive = TRUE)
library(NetworkExtinction)
library(network)
# Reviewer examples ------------------------------------------------------
star_mat <- matrix(c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
path_mat <- matrix(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
cycle_mat <- matrix(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
complete_mat <- matrix(rep(1,100), nrow=10, ncol=10) - diag(rep(1,10))
isolated_mat <- matrix(rep(0,100), nrow=10, ncol=10)
# Create networks
star_net <- as.network(star_mat, loops = TRUE)
star_net_mutualistic <- as.network(star_mat+t(star_mat), loops = TRUE)
path_net <- as.network(path_mat, loops = TRUE)
path_net_mutualistic <- as.network(path_mat+t(path_mat), loops = TRUE)
cycle_net <- as.network(cycle_mat, loops = TRUE)
cycle_net_mutualistic <- as.network(cycle_mat+t(cycle_mat), loops = TRUE)
complete_net <- as.network(complete_mat, loops = TRUE)
isolated_net <- as.network(isolated_mat, loops = TRUE)
# Fit a degree distribution
DegreeDistribution(star_net) #Fails #uniform
# Fit a degree distribution
DegreeDistribution(star_net) #Fails #uniform
library(NetworkExtinction)
library(network)
# Reviewer examples ------------------------------------------------------
star_mat <- matrix(c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
path_mat <- matrix(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
cycle_mat <- matrix(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
complete_mat <- matrix(rep(1,100), nrow=10, ncol=10) - diag(rep(1,10))
isolated_mat <- matrix(rep(0,100), nrow=10, ncol=10)
# Create networks
star_net <- as.network(star_mat, loops = TRUE)
star_net_mutualistic <- as.network(star_mat+t(star_mat), loops = TRUE)
path_net <- as.network(path_mat, loops = TRUE)
path_net_mutualistic <- as.network(path_mat+t(path_mat), loops = TRUE)
cycle_net <- as.network(cycle_mat, loops = TRUE)
cycle_net_mutualistic <- as.network(cycle_mat+t(cycle_mat), loops = TRUE)
complete_net <- as.network(complete_mat, loops = TRUE)
isolated_net <- as.network(isolated_mat, loops = TRUE)
# Fit a degree distribution
DegreeDistribution(star_net) #Fails #uniform
DegreeDistribution(star_net_mutualistic) # OK
DegreeDistribution(path_net) #Fails  #just one value
DegreeDistribution(path_net) #Fails  #just one value
DegreeDistribution(path_net) #Fails  #just one value
DegreeDistribution(path_net_mutualistic) # OK
library(gpttools)
Sys.setenv(OPENAI_API_KEY = "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")
usethis::use_test("DataInit")
pkgdown::render_page()
?pkgdown::render_page
DegreeDistribution(path_net_mutualistic) # OK
DegreeDistribution(path_net_mutualistic) # OK
library(NetworkExtinction)
library(network)
# Reviewer examples ------------------------------------------------------
star_mat <- matrix(c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
path_mat <- matrix(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
cycle_mat <- matrix(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0), nrow=10, ncol=10)
complete_mat <- matrix(rep(1,100), nrow=10, ncol=10) - diag(rep(1,10))
isolated_mat <- matrix(rep(0,100), nrow=10, ncol=10)
# Create networks
star_net <- as.network(star_mat, loops = TRUE)
star_net_mutualistic <- as.network(star_mat+t(star_mat), loops = TRUE)
path_net <- as.network(path_mat, loops = TRUE)
path_net_mutualistic <- as.network(path_mat+t(path_mat), loops = TRUE)
cycle_net <- as.network(cycle_mat, loops = TRUE)
cycle_net_mutualistic <- as.network(cycle_mat+t(cycle_mat), loops = TRUE)
complete_net <- as.network(complete_mat, loops = TRUE)
isolated_net <- as.network(isolated_mat, loops = TRUE)
# Fit a degree distribution
DegreeDistribution(star_net) #Fails #uniform
DegreeDistribution(star_net_mutualistic) # OK
DegreeDistribution(path_net) #Fails  #just one value
plot(path_net)
path_net
DegreeDistribution(path_net) #Fails  #just one value
DegreeDistribution(path_net_mutualistic) # OK
DegreeDistribution(cycle_net) #Fails #just one value
DegreeDistribution(path_net_mutualistic) # OK
DegreeDistribution(cycle_net) #Fails #just one value
DegreeDistribution(cycle_net_mutualistic) # Fails #uniform
DegreeDistribution(complete_net) #Fails #uniform
DegreeDistribution(isolated_net) # Fails #just one value
usethis::use_pkgdown()
pkgdown::build_site()
?usethis::use_github_actions()
usethis::use_github_action("pkgdown")
library(NetworkExtinction)
# Fit a degree distribution
DegreeDistribution(star_net) #Fails #uniform
DegreeDistribution(star_net_mutualistic) # OK
DegreeDistribution(path_net) #Fails  #just one value
DegreeDistribution(cycle_net) #Fails #just one value
DegreeDistribution(cycle_net_mutualistic) # Fails #uniform
DegreeDistribution(complete_net) #Fails #uniform
DegreeDistribution(isolated_net) # Fails #just one value
NetworkSize <- network::network.size(Network)
FracTotalExt <- DF$TotalExt/NetworkSize
NetworkSize <- network::network.size(Network)
install.packages("doSNOW")
usethis::use_package("doSNOW")
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
