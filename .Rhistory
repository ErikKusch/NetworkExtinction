library(NetworkExtinction)
install.packages("cranlogs")
?cranlogs::cran_downloads()
NetExt <- cran_downloads(packages = "NetworkExtinction",from = "2014-06-30", to = "2022-11-22")
library(cranlogs)
NetExt <- cran_downloads(packages = "NetworkExtinction",from = "2014-06-30", to = "2022-11-22")
NetExt
NetExt$count
NetExt$count %>% hist
NetExt$count |> hist
NetExt$count |> hist()
NetExt$count |> sum()
sum(NetExt$count)
NetExt <- cran_downloads(packages = "NetworkExtinction", when = "last-month")
sum(NetExt$count)
View(NetExt)
NetExt <- cran_downloads(packages = "NetworkExtinction",from = "2014-06-30", to = "2022-11-22")
list.files(path = "data/")
citation("splines")
covr::code_coverage()
covr::package_coverage()
covr::package_coverage()
install.packages(c("bbotk", "broom.helpers", "geodata", "gert", "glmnet", "gtExtras", "gtools", "infer", "jpeg", "msm", "optimizeR", "png", "raster", "rhino", "stringr", "terra", "XML"))
install.packages("testhat")
install.packages("testthat")
?usethis::use_testthat()
library(usethis)
usethis::use_testthat(3)
?testthat::test_that()
?testthat::test_that()
?testthat::expect_type
data("iris")
typeof(iris)
oros
iris
iris %>% class
class(iris)
typeof(iris)
usethis::use_test("SimulateExtinctions")
typeof(iris)
library(NetworkExtinction)
?SimulateExtinctions
NetworkExtinction::net
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected",
clust.method = "cluster_infomap")
data("net")
A <-SimulateExtinctions(Network = net, Method = "Mostconnected",
clust.method = "cluster_infomap")
A$sims
data("More_Connected")
RandomExtinctions(Network = More_Connected, nsim = 20)
data("More_Connected")
A <- RandomExtinctions(Network = More_Connected, nsim = 20)
A
A$sims
usethis::use_test("RandomExtinctions")
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
ExtinctionPlot(History = history$sims)
G <- ExtinctionPlot(History = history$sims)
G
class(G)
usethis::use_test("ExtinctionPlot")
test_that("ExtinctionPlot works", {
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
expect_is(ExtinctionPlot(History = history$sims), "ggplot")
})
source("~/Documents/NetworkExtinction/tests/testthat.R")
testthat::test_file("tests/testthat/test-ExtinctionPlot.R)
)
)""
")
testthat::test_file("tests/testthat/test-ExtinctionPlot.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
testthat::test_file("tests/testthat/test-ExtinctionPlot.R")
?expect_message
testthat::test_file("tests/testthat/test-ExtinctionPlot.R")
testthat::test_file("tests/testthat/test-RandomExtinctions.R")
DF <- RandomExtinctions(Network = More_Connected, nsim = 20)$sims
warnings()
?expect_warning
testthat::test_file("tests/testthat/test-RandomExtinctions.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
use_test("CompareExtinctions")
testthat::test_file("tests/testthat/test-RandomExtinctions.R")
usethis::use_test("CompareExtinctions")
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Compare <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Compare
class(Compare)
testthat::test_file("tests/testthat/test-CompareExtinctions.R")
testthat::test_file("tests/testthat/test-CompareExtinctions.R")
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
data("chilean_intertidal")
DD <- DegreeDistribution(chilean_intertidal)
DD
DD$DDvalues
DD$DDvalues %>% class()
usethis::use_test("DegreeDistribution")
testthat::test_file("tests/testthat/test-DegreeDistribution.R")
usethis::use_test("ExtinctionOrder ")
usethis::use_test("ExtinctionOrder")
ExtinctionOrder(NetworkType = net, Order = 1:8)
ExtinctionOrder(NetworkType = net, Order = 1:8, NetworkType = "Trophic")
ExtinctionOrder(net, Order = 1:8, NetworkType = "Trophic")
DF <- ExtinctionOrder(net, Order = 1:8, NetworkType = "Trophic")
DF$sims
testthat::test_file("tests/testthat/test-ExtinctionOrder.R")
devtools::install_github("r-lib/covr")
library(covr)
report()
?SimulateExtinctions
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Ordered",
Order = 1:8,
clust.method = "cluster_edge_betweenness")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
report()
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
library(NetworkExtinction)
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
?cluster_spinglass
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
library(NetworkExtinction)
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
unconnected graph, Invalid value
debugonce()
debugonce("SimulateExtinctions")
SimulateExtinctions(Network = NetworkExtinction::net, Method = "Ordered",
Order = 1:8,
clust.method = "cluster_spinglass")
debugonce("SimulateExtinctions")
SimulateExtinctions(Network = NetworkExtinction::net, Method = "Ordered",
Order = 1:8,
clust.method = "cluster_spinglass")
length(igraph::E(netgraph))==0
igraph::E(netgraph)
netgraph
netgraph
?cluster_spinglass
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
covr::report()
Mostconnected_Thresh <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
IS = 0.5)
Mostconnected_Thresh$sims
Mostconnected_Rewiring <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
Rewiring = function(x){x},
RewiringDist = chilean_potential,
RewiringProb = 0.5)
Mostconnected_Rewiring$sims
covr::report()
?covr::report()
covr::report()
covr::report()
?covr::report
covr::report(file = file.path(getwd(), paste0(get_package_name(x), "-report.html")))
covr::report(file = file.path(getwd(), paste0("NetworkExtinction", "-report.html")))
usethis::use_github_action("test-coverage")
install.packages("dismo")
library(testthat)
skip_on_cran()
skip_on_cran
on_cran
testthat:::on_cran()
testthat:::on_cran
Sys.ge''
Sys.getenv()
?usethis::use_badge()
usethis::use_cran_badge()
usethis::use_cran_badge
install.packages("rcompendium")
rcompendium::add_codecov_badge
rcompendium::add_codecov_badge()
gitcreds::gitcreds_set()
rcompendium::add_codecov_badge()
rlang::last_error()
usethis::create_github_token()
gitcreds::gitcreds_set()
rcompendium::add_codecov_badge()
rcompendium::add_codecov_badge
library(usethis)
use_coverage(type = "codecov")
use_coverage(type = "codecov")
use_coverage(type = "codecov")
use_coverage(type = "codecov")
?use_coverage(type = "codecov")
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
Mostconnected <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
NetworkType = "Trophic", # default argument
IS = 0, # default argument
Rewiring = FALSE # default argument
)
Mostconnected
Mostconnected$sims
Mostconnected$sims %>% head
Mostconnected$sims %>% head %>% View
Order <- order(sna::degree(chilean_intertidal, cmode = "outdegree"),
decreasing = TRUE)[1:60]
Ordered <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Ordered", Order = Order,
NetworkType = "Trophic", # default argument
IS = 0, # default argument
Rewiring = FALSE # default argument
)
Ordered$sims
Order <- order(sna::degree(chilean_intertidal, cmode = "outdegree"),
decreasing = TRUE)[1:60]
Ordered <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Ordered", Order = Order,
NetworkType = "Trophic", # default argument
IS = 0, # default argument
Rewiring = FALSE # default argument
)
Ordered$sims %>% View
Order_primonly <- chilean_intertidal
Order_primonly <- network::delete.vertices(Order_primonly, Order)
circlelayout <- network::network.layout.circle(chilean_intertidal)
plot(Order_primonly,
mode = "circle",
coord = circlelayout[as.numeric(network::get.vertex.attribute(Order_primonly, "vertex.names")), ]
)
plot(Ordered$Network,
mode = "circle",
coord = circlelayout[as.numeric(network::get.vertex.attribute(Ordered$Network, "vertex.names")), ]
)
Random_MC <- RandomExtinctions(Network = chilean_intertidal, nsim = 100,
parallel = TRUE, ncores = 4,
Record = FALSE, plot = TRUE)
Random_OR <- RandomExtinctions(Network = chilean_intertidal, nsim = 100,
SimNum = length(Order),
parallel = TRUE, ncores = 4,
Record = FALSE, plot = TRUE)
ExtinctionPlot(Mostconnected$sims)
ExtinctionPlot(History = Mostconnected$sims, Variable = "Link_density")
CompareExtinctions(Nullmodel = Random_MC, Hypothesis = Mostconnected)
CompareExtinctions(Nullmodel = Random_OR, Hypothesis = Ordered)
### chunk 7 - degree distribution
DegreeDistribution(chilean_intertidal, scale = "LogLog")
library(ggplot2)
data(chilean_weighted)
chilean_weighted <- as.matrix(chilean_weighted)
rownames(chilean_weighted) <- colnames(chilean_weighted)
Mostconnected_Thresh <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
IS = 0.75)
Random_Thresh <- RandomExtinctions(Network = chilean_weighted, nsim = 100,
IS = 0.5, parallel = TRUE, ncores = 4)
library(NetworkExtinction)
library(ggplot2)
data(chilean_weighted)
chilean_weighted <- as.matrix(chilean_weighted)
rownames(chilean_weighted) <- colnames(chilean_weighted)
Mostconnected_Thresh <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
IS = 0.75)
Random_Thresh <- RandomExtinctions(Network = chilean_weighted, nsim = 100,
IS = 0.5, parallel = TRUE, ncores = 4)
Nullmodel = Random_Thresh
Hypothesis = Mostconnected_Thresh
Addmodel = Mostconnected$sims
g <- ggplot(Nullmodel$sims, aes(x = NumExt, y = AccSecExt_mean)) +
geom_ribbon(aes_string(ymin = "Lower", ymax = "Upper"), fill = "grey") +
geom_line(aes(color = "blue"), color = "blue", size = 1.2) +
ylab("Acc. Secondary extinctions") + xlab("Primary extinctions") + theme_bw()
g <- g + geom_point(data = Hypothesis$sims, aes(y = AccSecExt), color = "black") +
geom_line(data = Hypothesis$sims, aes(y = AccSecExt, color = "black"),
color = "black", size = 1.2)
g <- g + geom_point(data = Addmodel, aes(y = AccSecExt), color = "orange") +
geom_line(data = Addmodel, aes(y = AccSecExt, color = "orange"),
color = "orange", size = 1.2)
g
plotly::ggplotly(g)
library(NetworkExtinction)
library(NetworkExtinction)
data("More_Connected")
Test <- RandomExtinctions(Network = More_Connected, nsim = 20)
Test
data("More_Connected")
Test <- RandomExtinctions(Network = More_Connected, nsim = 20)
Test$sims
?CompareExtinctions
t run:
## Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
NullHyp$sims
NullHyp$sims |> View
NullHyp$sims |> View()
## Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Test <- RandomExtinctions(Network = More_Connected, nsim = 20)
Test$sims
Test$sims |> View
Test$sims |> View()
Test <- RandomExtinctions(Network = More_Connected, nsim = 20, Record = T)
Test$FullSims
Test$FullSims |> class
Test$FullSims |> class()
Test$FullSims |> View()
Test$FullSims |> View()
Test$FullSims[!is.na(Test$FullSims$SecExt), ]
Test$FullSims[!is.na(Test$FullSims$SecExt), ] |> View()
Test$FullSims[!is.na(Test$FullSims$SecExt), ] |>  dplyr::group_by(NumExt) %>% summarise(AccSecExt_95CI = 1.96*sd(AccSecExt), AccSecExt_mean = mean(AccSecExt), n = n())
library(magrittr)
Test$FullSims[!is.na(Test$FullSims$SecExt), ] |>  dplyr::group_by(NumExt) %>% summarise(AccSecExt_95CI = 1.96*sd(AccSecExt), AccSecExt_mean = mean(AccSecExt), n = n())
library(dplyr)
Test$FullSims[!is.na(Test$FullSims$SecExt), ] |>  dplyr::group_by(NumExt) %>% summarise(AccSecExt_95CI = 1.96*sd(AccSecExt), AccSecExt_mean = mean(AccSecExt), n = n())
Test$FullSims[!is.na(Test$FullSims$SecExt), ] |>  dplyr::group_by(NumExt) %>% summarise(AccSecExt_95CI = 1.96*sd(AccSecExt), AccSecExt_mean = mean(AccSecExt), n = n()) |> View()
Test$FullSims[!is.na(Test$FullSims$SecExt), ] |>  dplyr::group_by(NumExt) %>% summarise(AccSecExt_95CI = 1.96*sd(AccSecExt), AccSecExt_mean = mean(AccSecExt), n_sim = n()) |> View()
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 20)
Test$sims
Test$sims |> View
Test$sims |> View()
library(NetworkExtinction)
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 50)
Test$sims
Test$sims |> tail()
library(ggplot2)
ggplot(Test$sims, aes(x = NumExt, y = AccSecExt_mean))
ggplot(Test$sims, aes(x = NumExt, y = AccSecExt_mean)) + geom_ribbon(aes_string(ymin = "Lower", ymax = "Upper"), fill = scales::muted("red")) + geom_line() + ylab("Acc. Secondary extinctions") + xlab("Primary extinctions") + theme_bw()
ggplot(Test$sims, aes(x = NumExt, y = AccSecExt_mean)) + geom_ribbon(aes(ymin = Lower, ymax = Upper), fill = scales::muted("red")) + geom_line() + ylab("Acc. Secondary extinctions") + xlab("Primary extinctions") + theme_bw()
library(patchwork)
G <- ggplot(Test$sims, aes(x = NumExt, y = AccSecExt_mean)) + geom_ribbon(aes(ymin = Lower, ymax = Upper), fill = scales::muted("red")) + geom_line() + ylab("Acc. Secondary extinctions") + xlab("Primary extinctions") + theme_bw()
H <- ggplot(Test$sims, aes(x = NumExt, y = nsim)) + geom_line()
H
H <- ggplot(Test$sims, aes(x = NumExt, y = nsim/max(nsim))) + geom_line()
H
H
library(patchwork)
G/H
H <- ggplot(Test$sims, aes(x = NumExt, y = nsim/max(nsim))) + geom_line() + theme_bw()
H <- ggplot(Test$sims, aes(x = NumExt, y = nsim/max(nsim))) + geom_line() + theme_bw() + labs(y = "Proportion of Simulations")
G/H
patchwork::wrap_plots(G, H)
patchwork::wrap_plots(G, H, ncol = 1)
?patchwork::wrap_plots
usethis::use_package("patchwork")
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 50, plot = T)
Test$graph
library(NetworkExtinction)
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 50, plot = T)
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 50, plot = T)
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 100, plot = T)
ggplot2::element_blank()
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 100, plot = T)
?RandomExtinctions
Test <- RandomExtinctions(Network = More_Connected, nsim = 100, plot = T, Record = T)
Test
Test$nets
Test$FullSims
Test$FullSims |> View()
ExtinctionOrder()
?ExtinctionOrder
?SimulateExtinctions
data("net")
OrderedIdea <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10),
Method = "Ordered" , clust.method = "cluster_infomap")
OrderedIdea$sims
library(NetworkExtinction)
Test <- RandomExtinctions(Network = More_Connected, nsim = 100, plot = T, Record = T)
Test$FullSims$simulation
Test$FullSims
ggplot(Test$FullSims, aes(x = x = NumExt, y = AccSecExt)) + geom_line()
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt)) + geom_line()
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line()
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt)) + geom_line(size = 0.1)
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.1)
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05)
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05) + geom_line(Test$sims, aes(x = NumExt, y = AccSecExt_mean))
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05) + geom_line(Test$sims, aes(x = NumExt, y = AccSecExt_mean))
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05)
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05) + geom_line(data =Test$sims, aes(x = NumExt, y = AccSecExt_mean))
ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05) + geom_line(data = Test$sims, aes(x = NumExt, y = AccSecExt_mean))
G <- ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05)
G
G + geom_line(data = Test$sims, aes(x = NumExt, y = AccSecExt_mean))
G
ggplot() + geom_line(data = Test$sims, aes(x = NumExt, y = AccSecExt_mean))
G + geom_line(data = Test$sims, aes(x = NumExt, y = AccSecExt_mean))
G
Test <- RandomExtinctions(Network = chilean_intertidal, nsim = 100, plot = T, Record = T)
?RandomExtinctions
Test <- RandomExtinctions(Network = chilean_intertidal, nsim = 100, plot = T, Record = T, ncores = 4)
library(NetworkExtinction)
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
NullHyp$sims
class(NullHyp$sims)
ggplot() + geom_line(data = Test$sims, aes(x = NumExt, y = AccSecExt_mean))
G <- ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(size = 0.05)
G <- ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(linewidth = 0.05)
G
G <- ggplot(Test$FullSims, aes(x =  NumExt, y = AccSecExt, group = simulation)) + geom_line(linewidth = 0.1)
G
?RandomExtinctions
Test$FullSims
library(NetworkExtinction)
?CompareExtinctions
# Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
# Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
A <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
class(History)
class(History$sims)
class(NullHyp$sims)
library(NetworkExtinction)
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
NullHyp$sims
library(ggplot2)
library(scales) # for muted
NullHyp$sims |> colnames()
library(ggplot2)
library(scales) # for muted
ggplot(NullHyp$sims, aes(x = NumExt, y = AccSecExt_mean)) +
geom_ribbon(aes(ymax = Upper, ymin = 0, group = Lower))
NullHyp$sims
library(ggplot2)
library(scales) # for muted
ggplot(NullHyp$sims, aes(x = NumExt, y = AccSecExt_mean)) +
geom_ribbon(aes(ymax = Upper, ymin = 0, group = Lower)) +
geom_col(aes(nsim))
nsim
nsim
NullHyp$sims$nsim
max(NullHyp$sims$nsim)
max(NullHyp$sims$nsim)/2
NullHyp$sims
library(ggplot2)
library(scales) # for muted
ggplot(NullHyp$sims, aes(x = NumExt, y = AccSecExt_mean)) +
geom_ribbon(aes(ymax = Upper, ymin = 0, group = Lower)) +
scale_fill_gradient2(position="bottom" , low = "blue", mid = muted("blue"), high = "red",
midpoint = median(max(NullHyp$sims$nsim)/2))
library(NetworkExtinction)
library(NetworkExtinction)
## Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
## Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
## Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
library(NetworkExtinction)
## Not run:
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
