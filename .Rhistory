data("net")
Order <- SimulateExtinctions(Network = net, Order = c(2,4,7), Method = "Ordered")
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 100)
data(net)
set.seed(707)
Test <- RandomExtinctions(Network= net, nsim= 100)
knitr::kable(Test, caption = "Table 3: The resulting dataframe of the RandomExtinctions function")
?RandomExtinctions
data(net)
set.seed(707)
RandomExtinctions(Network= net, nsim= 100, plot = T)
#Test$graph
data(net)
set.seed(707)
Test <- RandomExtinctions(Network= net, nsim= 100, plot = T)
Test$graph
data("net")
History <- SimulateExtinctions(Network = net, #Order = c(1,2,3,4,5,6,7,8,9,10),
Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
History
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
class(History)
library(NetworkExtinction)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = FALSE
)
knitr::opts_chunk$set(fig.width=6, fig.height=4, message = FALSE)
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
NullHyp <- RandomExtinctions(Network = net, nsim = 100)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
data("net")
History <- SimulateExtinctions(Network = net, Order = c(1,2,3,4,5,6,7,8,9,10), Method = "Ordered")
NullHyp <- RandomExtinctions(Network = net, nsim = 100, plot = T)
Comparison <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Comparison
library(NetworkExtinction)
?Deprecated
?SimulateExtinctions
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
library(NetworkExtinction)
devtools::install_github("r-lib/usethis")
plot(1:1e3, 1-pexp(1:1e3, rate = 1))
plot(1:1e3, 1-pexp(1:1e3, rate = 100))
plot(1:1e3, 1-pexp(1:1e3, rate = 0.0001))
plot(1:1e3, 1-pexp(1:1e3, rate = 0.001))
plot(1:1e3, 1-pexp(1:1e3, rate = 0.01))
if(parallel){
cl <- makeCluster(ncores)
registerDoParallel(cl)
parallel::clusterExport(cl,
varlist = c("network", "SimNum", "IS", "Rewiring", "RewiringDist", "RewiringProb"),
envir = environment()
)
sims <- foreach(i=1:nsim, .packages = "NetworkExtinction")%dopar%{
sims <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network), size = SimNum),
IS = IS, NetworkType = NetworkType,
Rewiring = Rewiring, RewiringDist = RewiringDist,
verbose = FALSE, RewiringProb = RewiringProb), silent = TRUE)
try({sims$simulation <- i}, silent = TRUE)
sims
}
stopCluster(cl)
}else{
sims <- list()
for(i in 1:nsim){
sims[[i]] <- try(ExtinctionOrder(Network = network, Order = sample(1:network.size(network), size = SimNum),
IS = IS, NetworkType = NetworkType,
Rewiring = Rewiring, RewiringDist = RewiringDist,
verbose = FALSE, RewiringProb = RewiringProb), silent = TRUE)
try({sims[[i]]$simulation <- i}, silent = TRUE)
if(verbose){setTxtProgressBar(ProgBar, i)}
}
}
library(NetworkExtinction)
data("chilean_potential")
chilean_potential
diff(2,2)
diff(2,1)
diff(c(1,2))
diff(c(2,2))
diff(c(3,2))
library(NetworkExtinction)
devtools::document()
library(NetworkExtinction)
data("Less_Connected")
Less_Connected
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected", NetworkType = "Mutualistic")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
devtools::document()
library(NetworkExtinction)
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
library(NetworkExtinction)
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
ExtinctionPlot(History = history)
ExtinctionPlot(History = history$sims)
library(NetworkExtinction)
devtools::check_built(remote = T)
?devtools::check_built()
library(NetworkExtinction)
devtools::check_built("/home/au687614/Documents/NetworkExtinction_1.0.0.tar.gz", remote = T)
565/575
(565/575)*100
(565.9/575.4)*100
((565.9 + 0.4)/575.4)*100
install.packages("gdxrrw")
remotes::install_github("sitscholl/Rgadgets")
library(Rgadgets)
## Allprotections intersects with MARKBLOKORT
## dark grey
library(Rgadgets)
breaks <- 3
cmat <- rg_biv_cmat(breaks, style = 1)
legend <- rg_biv_get_legend(cmat, xlab = 'Gain', ylab = 'Loss')
xy <- rg_biv_create_raster(x, y, breaks)
map <- rg_biv_plot_raster(xy, cmat, border = st_border_proj, xlab = 'Gain', ylab = 'Loss', limits = c(10.7, 12, 46.2, 46.8))
map
## Allprotections intersects with MARKBLOKORT
## dark grey
library(Rgadgets)
library(ggplot2)
breaks <- 3
cmat <- rg_biv_cmat(breaks, style = 1)
legend <- rg_biv_get_legend(cmat, xlab = 'Gain', ylab = 'Loss')
xy <- rg_biv_create_raster(x, y, breaks)
xy <- rg_biv_create_raster(x, y, breaks)
## Allprotections intersects with MARKBLOKORT
## dark grey
library(Rgadgets)
library(ggplot2)
library(GeoStratR)
data("Bios")
plot(Bios)
library(raster)
library(ggplot2)
library(GeoStratR)
data("Bios")
plot(Bios)
breaks <- 3
Temp <- Bios[[1]]
Prec <- Bios[[4]]
data("Bios")
breaks <- 3
Temp <- Bios[[1]]
Prec <- Bios[[4]]
cmat <- rg_biv_cmat(breaks, style = 1)
legend <- rg_biv_get_legend(cmat, xlab = 'Temp', ylab = 'Prec')
xy <- rg_biv_create_raster(Temp, Prec, breaks)
map <- rg_biv_plot_raster(xy, cmat, border = st_border_proj, xlab = 'Gain', ylab = 'Loss', limits = c(10.7, 12, 46.2, 46.8))
xy
plot(xy)
rg_biv_plot_raster(xy, cmat)
rg_biv_plot_raster
rg_biv_plot_raster
rg_biv_plot_raster
bivraster = xy
crs = "+init=epsg:4326"
bivraster %>% raster::projectRaster(crs = crs) %>%
raster::as.data.frame(xy = TRUE)
bivraster %>% raster::projectRaster(crs = crs)
bivraster
crs = "+init=epsg:4326"
bivraster %>% raster::projectRaster(crs = crs)
bivraster %>% #raster::projectRaster(crs = crs) %>%
raster::as.data.frame(xy = TRUE) %>% tibble::as_tibble() %>%
dplyr::rename(BivValue = 3) %>% tidyr::pivot_longer(names_to = "Variable",
values_to = "bivVal", cols = BivValue)
r_df <- bivraster %>% #raster::projectRaster(crs = crs) %>%
raster::as.data.frame(xy = TRUE) %>% tibble::as_tibble() %>%
dplyr::rename(BivValue = 3) %>% tidyr::pivot_longer(names_to = "Variable",
values_to = "bivVal", cols = BivValue)
crs
bivraster %>% raster::projectRaster(crs = crs)
?raster::projectRaster
projectRaster(Bios[[1]], crs = crs)
projectRaster(Bios[[1]], crs = "+init=epsg:4326")
devtools::check(remote = T)
devtools::check(remote = T)
library(NetworkExtinction)
library(NetworkExtinction)
install.packages("pkgdown")
install.packages("ragg")
install.packages("ragg")
library(NetworkExtinction)
library(NetworkExtinction)
install.packages("cranlogs")
?cranlogs::cran_downloads()
NetExt <- cran_downloads(packages = "NetworkExtinction",from = "2014-06-30", to = "2022-11-22")
library(cranlogs)
NetExt <- cran_downloads(packages = "NetworkExtinction",from = "2014-06-30", to = "2022-11-22")
NetExt
NetExt$count
NetExt$count %>% hist
NetExt$count |> hist
NetExt$count |> hist()
NetExt$count |> sum()
sum(NetExt$count)
NetExt <- cran_downloads(packages = "NetworkExtinction", when = "last-month")
sum(NetExt$count)
View(NetExt)
NetExt <- cran_downloads(packages = "NetworkExtinction",from = "2014-06-30", to = "2022-11-22")
list.files(path = "data/")
citation("splines")
covr::code_coverage()
covr::package_coverage()
covr::package_coverage()
install.packages(c("bbotk", "broom.helpers", "geodata", "gert", "glmnet", "gtExtras", "gtools", "infer", "jpeg", "msm", "optimizeR", "png", "raster", "rhino", "stringr", "terra", "XML"))
install.packages("testhat")
install.packages("testthat")
?usethis::use_testthat()
library(usethis)
usethis::use_testthat(3)
?testthat::test_that()
?testthat::test_that()
?testthat::expect_type
data("iris")
typeof(iris)
oros
iris
iris %>% class
class(iris)
typeof(iris)
usethis::use_test("SimulateExtinctions")
typeof(iris)
library(NetworkExtinction)
?SimulateExtinctions
NetworkExtinction::net
data("net")
SimulateExtinctions(Network = net, Method = "Mostconnected",
clust.method = "cluster_infomap")
data("net")
A <-SimulateExtinctions(Network = net, Method = "Mostconnected",
clust.method = "cluster_infomap")
A$sims
data("More_Connected")
RandomExtinctions(Network = More_Connected, nsim = 20)
data("More_Connected")
A <- RandomExtinctions(Network = More_Connected, nsim = 20)
A
A$sims
usethis::use_test("RandomExtinctions")
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
ExtinctionPlot(History = history$sims)
G <- ExtinctionPlot(History = history$sims)
G
class(G)
usethis::use_test("ExtinctionPlot")
test_that("ExtinctionPlot works", {
data("net")
history <- SimulateExtinctions(Network = net, Method = "Mostconnected")
expect_is(ExtinctionPlot(History = history$sims), "ggplot")
})
source("~/Documents/NetworkExtinction/tests/testthat.R")
testthat::test_file("tests/testthat/test-ExtinctionPlot.R)
)
)""
")
testthat::test_file("tests/testthat/test-ExtinctionPlot.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
testthat::test_file("tests/testthat/test-ExtinctionPlot.R")
?expect_message
testthat::test_file("tests/testthat/test-ExtinctionPlot.R")
testthat::test_file("tests/testthat/test-RandomExtinctions.R")
DF <- RandomExtinctions(Network = More_Connected, nsim = 20)$sims
warnings()
?expect_warning
testthat::test_file("tests/testthat/test-RandomExtinctions.R")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
use_test("CompareExtinctions")
testthat::test_file("tests/testthat/test-RandomExtinctions.R")
usethis::use_test("CompareExtinctions")
data("Less_Connected")
History <- SimulateExtinctions(Network = Less_Connected, Method = "Mostconnected")
NullHyp <- RandomExtinctions(Network = Less_Connected, nsim = 100)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Compare <- CompareExtinctions(Nullmodel = NullHyp, Hypothesis = History)
Compare
class(Compare)
testthat::test_file("tests/testthat/test-CompareExtinctions.R")
testthat::test_file("tests/testthat/test-CompareExtinctions.R")
library(NetworkExtinction)
data("chilean_intertidal")
DegreeDistribution(chilean_intertidal)
library(NetworkExtinction)
data("chilean_intertidal")
DD <- DegreeDistribution(chilean_intertidal)
DD
DD$DDvalues
DD$DDvalues %>% class()
usethis::use_test("DegreeDistribution")
testthat::test_file("tests/testthat/test-DegreeDistribution.R")
usethis::use_test("ExtinctionOrder ")
usethis::use_test("ExtinctionOrder")
ExtinctionOrder(NetworkType = net, Order = 1:8)
ExtinctionOrder(NetworkType = net, Order = 1:8, NetworkType = "Trophic")
ExtinctionOrder(net, Order = 1:8, NetworkType = "Trophic")
DF <- ExtinctionOrder(net, Order = 1:8, NetworkType = "Trophic")
DF$sims
testthat::test_file("tests/testthat/test-ExtinctionOrder.R")
devtools::install_github("r-lib/covr")
library(covr)
report()
?SimulateExtinctions
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Ordered",
Order = 1:8,
clust.method = "cluster_edge_betweenness")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
report()
DF2 <- SimulateExtinctions(Network = NetworkExtinction::net, Method = "Mostconnected",
clust.method = "cluster_edge_betweenness")
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
library(NetworkExtinction)
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
?cluster_spinglass
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
library(NetworkExtinction)
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
unconnected graph, Invalid value
debugonce()
debugonce("SimulateExtinctions")
SimulateExtinctions(Network = NetworkExtinction::net, Method = "Ordered",
Order = 1:8,
clust.method = "cluster_spinglass")
debugonce("SimulateExtinctions")
SimulateExtinctions(Network = NetworkExtinction::net, Method = "Ordered",
Order = 1:8,
clust.method = "cluster_spinglass")
length(igraph::E(netgraph))==0
igraph::E(netgraph)
netgraph
netgraph
?cluster_spinglass
library(NetworkExtinction)
testthat::test_file("tests/testthat/test-SimulateExtinctions.R")
covr::report()
Mostconnected_Thresh <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
IS = 0.5)
Mostconnected_Thresh$sims
Mostconnected_Rewiring <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
Rewiring = function(x){x},
RewiringDist = chilean_potential,
RewiringProb = 0.5)
Mostconnected_Rewiring$sims
covr::report()
?covr::report()
covr::report()
covr::report()
?covr::report
covr::report(file = file.path(getwd(), paste0(get_package_name(x), "-report.html")))
covr::report(file = file.path(getwd(), paste0("NetworkExtinction", "-report.html")))
usethis::use_github_action("test-coverage")
install.packages("dismo")
library(testthat)
skip_on_cran()
skip_on_cran
on_cran
testthat:::on_cran()
testthat:::on_cran
Sys.ge''
Sys.getenv()
?usethis::use_badge()
usethis::use_cran_badge()
usethis::use_cran_badge
install.packages("rcompendium")
rcompendium::add_codecov_badge
rcompendium::add_codecov_badge()
gitcreds::gitcreds_set()
rcompendium::add_codecov_badge()
rlang::last_error()
usethis::create_github_token()
gitcreds::gitcreds_set()
rcompendium::add_codecov_badge()
rcompendium::add_codecov_badge
library(usethis)
use_coverage(type = "codecov")
use_coverage(type = "codecov")
use_coverage(type = "codecov")
use_coverage(type = "codecov")
?use_coverage(type = "codecov")
library(NetworkExtinction)
library(NetworkExtinction)
data("chilean_intertidal")
Mostconnected <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
NetworkType = "Trophic", # default argument
IS = 0, # default argument
Rewiring = FALSE # default argument
)
Mostconnected
Mostconnected$sims
Mostconnected$sims %>% head
Mostconnected$sims %>% head %>% View
Order <- order(sna::degree(chilean_intertidal, cmode = "outdegree"),
decreasing = TRUE)[1:60]
Ordered <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Ordered", Order = Order,
NetworkType = "Trophic", # default argument
IS = 0, # default argument
Rewiring = FALSE # default argument
)
Ordered$sims
Order <- order(sna::degree(chilean_intertidal, cmode = "outdegree"),
decreasing = TRUE)[1:60]
Ordered <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Ordered", Order = Order,
NetworkType = "Trophic", # default argument
IS = 0, # default argument
Rewiring = FALSE # default argument
)
Ordered$sims %>% View
Order_primonly <- chilean_intertidal
Order_primonly <- network::delete.vertices(Order_primonly, Order)
circlelayout <- network::network.layout.circle(chilean_intertidal)
plot(Order_primonly,
mode = "circle",
coord = circlelayout[as.numeric(network::get.vertex.attribute(Order_primonly, "vertex.names")), ]
)
plot(Ordered$Network,
mode = "circle",
coord = circlelayout[as.numeric(network::get.vertex.attribute(Ordered$Network, "vertex.names")), ]
)
Random_MC <- RandomExtinctions(Network = chilean_intertidal, nsim = 100,
parallel = TRUE, ncores = 4,
Record = FALSE, plot = TRUE)
Random_OR <- RandomExtinctions(Network = chilean_intertidal, nsim = 100,
SimNum = length(Order),
parallel = TRUE, ncores = 4,
Record = FALSE, plot = TRUE)
ExtinctionPlot(Mostconnected$sims)
ExtinctionPlot(History = Mostconnected$sims, Variable = "Link_density")
CompareExtinctions(Nullmodel = Random_MC, Hypothesis = Mostconnected)
CompareExtinctions(Nullmodel = Random_OR, Hypothesis = Ordered)
### chunk 7 - degree distribution
DegreeDistribution(chilean_intertidal, scale = "LogLog")
library(ggplot2)
data(chilean_weighted)
chilean_weighted <- as.matrix(chilean_weighted)
rownames(chilean_weighted) <- colnames(chilean_weighted)
Mostconnected_Thresh <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
IS = 0.75)
Random_Thresh <- RandomExtinctions(Network = chilean_weighted, nsim = 100,
IS = 0.5, parallel = TRUE, ncores = 4)
library(NetworkExtinction)
library(ggplot2)
data(chilean_weighted)
chilean_weighted <- as.matrix(chilean_weighted)
rownames(chilean_weighted) <- colnames(chilean_weighted)
Mostconnected_Thresh <- SimulateExtinctions(Network = chilean_intertidal,
Method = "Mostconnected",
IS = 0.75)
Random_Thresh <- RandomExtinctions(Network = chilean_weighted, nsim = 100,
IS = 0.5, parallel = TRUE, ncores = 4)
Nullmodel = Random_Thresh
Hypothesis = Mostconnected_Thresh
Addmodel = Mostconnected$sims
g <- ggplot(Nullmodel$sims, aes(x = NumExt, y = AccSecExt_mean)) +
geom_ribbon(aes_string(ymin = "Lower", ymax = "Upper"), fill = "grey") +
geom_line(aes(color = "blue"), color = "blue", size = 1.2) +
ylab("Acc. Secondary extinctions") + xlab("Primary extinctions") + theme_bw()
g <- g + geom_point(data = Hypothesis$sims, aes(y = AccSecExt), color = "black") +
geom_line(data = Hypothesis$sims, aes(y = AccSecExt, color = "black"),
color = "black", size = 1.2)
g <- g + geom_point(data = Addmodel, aes(y = AccSecExt), color = "orange") +
geom_line(data = Addmodel, aes(y = AccSecExt, color = "orange"),
color = "orange", size = 1.2)
g
plotly::ggplotly(g)
library(NetworkExtinction)
