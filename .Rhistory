if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, igraph, network, sna, dplyr, readxl)
Toy_model <- read_excel("/home/derek/Documents/NetworkExtintion/Toy model.xlsx")
Toy_model <- Toy_model[,-1]
net <- as.network(Toy_model, loops = TRUE)
edgelist <- as.matrix(net,matrix.type="edgelist") #Prey - Predator
net
edgelist <- as.matrix(net,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:10, Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(net, cmode = "indegree")
indegreebasenetzeros <- sum(degree(net, cmode = "indegree") == 0)
Producers <- (1:length(degree(net, cmode = "indegree")))[degree(net, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, 10), nodesS = rep(NA, 10), linksS = rep(NA, 10),  indegreecero = rep(NA,10))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:10){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- net
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- net
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- net
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
View(DF)
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:length(network.size(Network)), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, length(network.size(Network))), nodesS = rep(NA, length(network.size(Network))), linksS = rep(NA, length(network.size(Network))),  indegreecero = rep(NA,length(network.size(Network))))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:length(network.size(Network))){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
return(DF)
}
Mostconnected(Network = net)
length(network.size(net))
network.size(net)
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:length(network.size(Network)), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, length(network.size(Network))), nodesS = rep(NA, length(network.size(Network))), linksS = rep(NA, length(network.size(Network))),  indegreecero = rep(NA,length(network.size(Network))))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
return(DF)
}
Mostconnected()
Mostconnected(net)
Toy_model <- read_excel("/home/derek/Documents/NetworkExtintion/Toy model.xlsx")
Toy_model <- Toy_model[,-1]
net <- as.network(Toy_model, loops = TRUE)
edgelist <- as.matrix(net,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:10, Grado = degree(edgelist, c("total")))
Conected
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, length(network.size(Network))), nodesS = rep(NA, length(network.size(Network))), linksS = rep(NA, length(network.size(Network))),  indegreecero = rep(NA,length(network.size(Network))))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
return(DF)
}
Mostconnected(net)
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
return(DF)
}
Mostconnected(net)
Mostconnected(net)
Mostconnected(net)
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
DF <- DF[complete.cases(DF),]
return(DF)
}
DF
Mostconnected <- function(Network){
edgelist <- as.matrix(Network,matrix.type="edgelist") #Prey - Predator
Conected <- data.frame(ID = 1:network.size(Network), Grado = degree(edgelist, c("total")))
Conected <- arrange(Conected, desc(Grado))
Conected1<- c(Conected$ID)
indegreebasenet <- degree(Network, cmode = "indegree")
indegreebasenetzeros <- sum(degree(Network, cmode = "indegree") == 0)
Producers <- (1:length(degree(Network, cmode = "indegree")))[degree(Network, cmode = "indegree") == 0]
DF <- data.frame(Spp = rep(NA, network.size(Network)), nodesS = rep(NA, network.size(Network)), linksS = rep(NA, network.size(Network)),  indegreecero = rep(NA,network.size(Network)))
Secundaryext <- c()
accExt <- c()
totalExt <- c()
FinalExt <- list()
Conected3 <- c()
####LOOP####
for (i in 1:network.size(Network)){
#esta lista tiene el mismo orden que conected 1, hay que
#volver a hacer la red y calcular el grado
if (length(accExt)==0){
Temp <- Network
DF$Spp[i] <- Conected1[i]
delete.vertices(Temp, c(DF$Spp[1:i]))
}
if (length(accExt)>0){
Temp <- Network
Temp <- delete.vertices(Temp, c(accExt))
edgelist <- as.matrix(Temp,matrix.type="edgelist")
Conected2 <- data.frame(ID = 1:network.size(Temp), Grado = degree(edgelist, c("total")))
Conected2 <- arrange(Conected2, desc(Grado))
for(j in sort(accExt)){
Conected2$ID <- ifelse(Conected2$ID < j, Conected2$ID, Conected2$ID + 1)
}
DF$Spp[i] <- Conected2$ID[1]
Temp <- Network
delete.vertices(Temp, unique(c(c(DF$Spp[1:i]),accExt)))
}
DF$nodesS[i] <- network.size(Temp)
DF$linksS[i] <- network.edgecount(Temp)
SecundaryextTemp <- (1:length(degree(Temp, cmode = "indegree")))[degree(Temp, cmode = "indegree") == 0]
for(j in sort(unique(c(c(DF$Spp[1:i]),accExt)))){
SecundaryextTemp <- ifelse(SecundaryextTemp < j, SecundaryextTemp, SecundaryextTemp + 1)
}
Secundaryext <- SecundaryextTemp
Secundaryext <- Secundaryext[!(Secundaryext %in% Producers)]
DF$indegreecero[i]<- length(Secundaryext)
print(i)
FinalExt[[i]] <-(Secundaryext)
accExt <- append(accExt, DF$Spp[1:i])
accExt <- unique(append(accExt,Secundaryext))
if (DF$linksS[i] == 0) break
}
DF <- DF[complete.cases(DF),]
return(DF)
}
Mostconnected(net)
class(net)
devtools::use_data(net)
net
class(net)
library(NetworkExtintion)
library(NetworkExtintion)
data("net")
Mostconnected(Network = net)
library(NetworkExtintion)
library(NetworkExtintion)
?Mostconnected
